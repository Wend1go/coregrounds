/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.protobuf.out.Login', null, global);
goog.exportSymbol('proto.protobuf.out.Login.Result', null, global);
goog.exportSymbol('proto.protobuf.out.Match', null, global);
goog.exportSymbol('proto.protobuf.out.Match.Finalize', null, global);
goog.exportSymbol('proto.protobuf.out.Match.Finalize.Player', null, global);
goog.exportSymbol('proto.protobuf.out.Match.Game', null, global);
goog.exportSymbol('proto.protobuf.out.Match.Game.Ability', null, global);
goog.exportSymbol('proto.protobuf.out.Match.Game.Core', null, global);
goog.exportSymbol('proto.protobuf.out.Match.Game.Factory', null, global);
goog.exportSymbol('proto.protobuf.out.Match.Game.Factory.Minion', null, global);
goog.exportSymbol('proto.protobuf.out.Match.Game.Factory.Tower', null, global);
goog.exportSymbol('proto.protobuf.out.Match.Game.Factory.Wall', null, global);
goog.exportSymbol('proto.protobuf.out.Match.Game.Minion', null, global);
goog.exportSymbol('proto.protobuf.out.Match.Game.OptionalGUID', null, global);
goog.exportSymbol('proto.protobuf.out.Match.Game.Player', null, global);
goog.exportSymbol('proto.protobuf.out.Match.Game.Projectile', null, global);
goog.exportSymbol('proto.protobuf.out.Match.Game.Tower', null, global);
goog.exportSymbol('proto.protobuf.out.Match.Game.Trigger', null, global);
goog.exportSymbol('proto.protobuf.out.Match.Game.Unit', null, global);
goog.exportSymbol('proto.protobuf.out.Match.Game.Visual', null, global);
goog.exportSymbol('proto.protobuf.out.Match.Game.Wall', null, global);
goog.exportSymbol('proto.protobuf.out.Match.OptionalIds', null, global);
goog.exportSymbol('proto.protobuf.out.Match.OptionalString', null, global);
goog.exportSymbol('proto.protobuf.out.Match.Pick', null, global);
goog.exportSymbol('proto.protobuf.out.Match.Pick.Player', null, global);
goog.exportSymbol('proto.protobuf.out.Match.Pick.State', null, global);
goog.exportSymbol('proto.protobuf.out.Message', null, global);
goog.exportSymbol('proto.protobuf.out.Pong', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.out.Login = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.out.Login, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.out.Login.displayName = 'proto.protobuf.out.Login';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.out.Login.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.out.Login.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.out.Login} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Login.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.out.Login}
 */
proto.protobuf.out.Login.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.out.Login;
  return proto.protobuf.out.Login.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.out.Login} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.out.Login}
 */
proto.protobuf.out.Login.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.protobuf.out.Login.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.out.Login.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.out.Login.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.out.Login} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Login.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.protobuf.out.Login.Result = {
  SUCCESS: 0,
  RECONNECT: 1,
  NOMATCHFOUND: 2,
  TIMEOUT: 3,
  MATCHCANCELED: 4
};

/**
 * optional Result result = 1;
 * @return {!proto.protobuf.out.Login.Result}
 */
proto.protobuf.out.Login.prototype.getResult = function() {
  return /** @type {!proto.protobuf.out.Login.Result} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.protobuf.out.Login.Result} value */
proto.protobuf.out.Login.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.out.Match = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protobuf.out.Match.oneofGroups_);
};
goog.inherits(proto.protobuf.out.Match, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.out.Match.displayName = 'proto.protobuf.out.Match';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protobuf.out.Match.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.protobuf.out.Match.PhaseCase = {
  PHASE_NOT_SET: 0,
  PICK: 1,
  GAME: 2,
  FINALIZE: 3
};

/**
 * @return {proto.protobuf.out.Match.PhaseCase}
 */
proto.protobuf.out.Match.prototype.getPhaseCase = function() {
  return /** @type {proto.protobuf.out.Match.PhaseCase} */(jspb.Message.computeOneofCase(this, proto.protobuf.out.Match.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.out.Match.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.out.Match.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.out.Match} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.toObject = function(includeInstance, msg) {
  var f, obj = {
    pick: (f = msg.getPick()) && proto.protobuf.out.Match.Pick.toObject(includeInstance, f),
    game: (f = msg.getGame()) && proto.protobuf.out.Match.Game.toObject(includeInstance, f),
    finalize: (f = msg.getFinalize()) && proto.protobuf.out.Match.Finalize.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.out.Match}
 */
proto.protobuf.out.Match.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.out.Match;
  return proto.protobuf.out.Match.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.out.Match} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.out.Match}
 */
proto.protobuf.out.Match.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protobuf.out.Match.Pick;
      reader.readMessage(value,proto.protobuf.out.Match.Pick.deserializeBinaryFromReader);
      msg.setPick(value);
      break;
    case 2:
      var value = new proto.protobuf.out.Match.Game;
      reader.readMessage(value,proto.protobuf.out.Match.Game.deserializeBinaryFromReader);
      msg.setGame(value);
      break;
    case 3:
      var value = new proto.protobuf.out.Match.Finalize;
      reader.readMessage(value,proto.protobuf.out.Match.Finalize.deserializeBinaryFromReader);
      msg.setFinalize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.out.Match.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.out.Match.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.out.Match} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPick();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protobuf.out.Match.Pick.serializeBinaryToWriter
    );
  }
  f = message.getGame();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protobuf.out.Match.Game.serializeBinaryToWriter
    );
  }
  f = message.getFinalize();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protobuf.out.Match.Finalize.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.out.Match.OptionalIds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protobuf.out.Match.OptionalIds.repeatedFields_, null);
};
goog.inherits(proto.protobuf.out.Match.OptionalIds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.out.Match.OptionalIds.displayName = 'proto.protobuf.out.Match.OptionalIds';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protobuf.out.Match.OptionalIds.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.out.Match.OptionalIds.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.out.Match.OptionalIds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.out.Match.OptionalIds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.OptionalIds.toObject = function(includeInstance, msg) {
  var f, obj = {
    isset: jspb.Message.getFieldWithDefault(msg, 1, false),
    idsList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.out.Match.OptionalIds}
 */
proto.protobuf.out.Match.OptionalIds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.out.Match.OptionalIds;
  return proto.protobuf.out.Match.OptionalIds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.out.Match.OptionalIds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.out.Match.OptionalIds}
 */
proto.protobuf.out.Match.OptionalIds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsset(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setIdsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.out.Match.OptionalIds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.out.Match.OptionalIds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.out.Match.OptionalIds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.OptionalIds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsset();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
};


/**
 * optional bool isSet = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protobuf.out.Match.OptionalIds.prototype.getIsset = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.protobuf.out.Match.OptionalIds.prototype.setIsset = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated uint32 ids = 2;
 * @return {!Array.<number>}
 */
proto.protobuf.out.Match.OptionalIds.prototype.getIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.protobuf.out.Match.OptionalIds.prototype.setIdsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.protobuf.out.Match.OptionalIds.prototype.addIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.protobuf.out.Match.OptionalIds.prototype.clearIdsList = function() {
  this.setIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.out.Match.OptionalString = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.out.Match.OptionalString, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.out.Match.OptionalString.displayName = 'proto.protobuf.out.Match.OptionalString';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.out.Match.OptionalString.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.out.Match.OptionalString.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.out.Match.OptionalString} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.OptionalString.toObject = function(includeInstance, msg) {
  var f, obj = {
    isset: jspb.Message.getFieldWithDefault(msg, 1, false),
    text: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.out.Match.OptionalString}
 */
proto.protobuf.out.Match.OptionalString.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.out.Match.OptionalString;
  return proto.protobuf.out.Match.OptionalString.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.out.Match.OptionalString} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.out.Match.OptionalString}
 */
proto.protobuf.out.Match.OptionalString.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsset(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.out.Match.OptionalString.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.out.Match.OptionalString.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.out.Match.OptionalString} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.OptionalString.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsset();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool isSet = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protobuf.out.Match.OptionalString.prototype.getIsset = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.protobuf.out.Match.OptionalString.prototype.setIsset = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.protobuf.out.Match.OptionalString.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protobuf.out.Match.OptionalString.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.out.Match.Pick = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protobuf.out.Match.Pick.repeatedFields_, null);
};
goog.inherits(proto.protobuf.out.Match.Pick, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.out.Match.Pick.displayName = 'proto.protobuf.out.Match.Pick';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protobuf.out.Match.Pick.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.out.Match.Pick.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.out.Match.Pick.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.out.Match.Pick} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Pick.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    time: jspb.Message.getFieldWithDefault(msg, 2, 0),
    playerList: jspb.Message.toObjectList(msg.getPlayerList(),
    proto.protobuf.out.Match.Pick.Player.toObject, includeInstance),
    playerindex: jspb.Message.getFieldWithDefault(msg, 4, 0),
    activeplayerindex: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.out.Match.Pick}
 */
proto.protobuf.out.Match.Pick.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.out.Match.Pick;
  return proto.protobuf.out.Match.Pick.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.out.Match.Pick} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.out.Match.Pick}
 */
proto.protobuf.out.Match.Pick.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.protobuf.out.Match.Pick.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 3:
      var value = new proto.protobuf.out.Match.Pick.Player;
      reader.readMessage(value,proto.protobuf.out.Match.Pick.Player.deserializeBinaryFromReader);
      msg.addPlayer(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlayerindex(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActiveplayerindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.out.Match.Pick.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.out.Match.Pick.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.out.Match.Pick} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Pick.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPlayerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.protobuf.out.Match.Pick.Player.serializeBinaryToWriter
    );
  }
  f = message.getPlayerindex();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getActiveplayerindex();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.protobuf.out.Match.Pick.State = {
  NONE: 0,
  FACTORYBAN: 1,
  ABILITYBAN: 2,
  FACTORYPICK: 3,
  ABILITYPICK: 4,
  MODSELECTION: 5,
  FINISHED: 6
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.out.Match.Pick.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protobuf.out.Match.Pick.Player.repeatedFields_, null);
};
goog.inherits(proto.protobuf.out.Match.Pick.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.out.Match.Pick.Player.displayName = 'proto.protobuf.out.Match.Pick.Player';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protobuf.out.Match.Pick.Player.repeatedFields_ = [1,2,3,4,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.out.Match.Pick.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.out.Match.Pick.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.out.Match.Pick.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Pick.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    factorybansList: jspb.Message.getRepeatedField(msg, 1),
    abilitybansList: jspb.Message.getRepeatedField(msg, 2),
    factorypicksList: jspb.Message.getRepeatedField(msg, 3),
    abilitypicksList: jspb.Message.getRepeatedField(msg, 4),
    colorid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    emoteid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    skins: (f = msg.getSkins()) && proto.protobuf.out.Match.OptionalIds.toObject(includeInstance, f),
    modpageid: jspb.Message.getFieldWithDefault(msg, 8, 0),
    availableidsList: jspb.Message.getRepeatedField(msg, 9),
    teamid: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.out.Match.Pick.Player}
 */
proto.protobuf.out.Match.Pick.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.out.Match.Pick.Player;
  return proto.protobuf.out.Match.Pick.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.out.Match.Pick.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.out.Match.Pick.Player}
 */
proto.protobuf.out.Match.Pick.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setFactorybansList(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setAbilitybansList(value);
      break;
    case 3:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setFactorypicksList(value);
      break;
    case 4:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setAbilitypicksList(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setColorid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEmoteid(value);
      break;
    case 7:
      var value = new proto.protobuf.out.Match.OptionalIds;
      reader.readMessage(value,proto.protobuf.out.Match.OptionalIds.deserializeBinaryFromReader);
      msg.setSkins(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setModpageid(value);
      break;
    case 9:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setAvailableidsList(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTeamid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.out.Match.Pick.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.out.Match.Pick.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.out.Match.Pick.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Pick.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFactorybansList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getAbilitybansList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = message.getFactorypicksList();
  if (f.length > 0) {
    writer.writePackedUint32(
      3,
      f
    );
  }
  f = message.getAbilitypicksList();
  if (f.length > 0) {
    writer.writePackedUint32(
      4,
      f
    );
  }
  f = message.getColorid();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getEmoteid();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getSkins();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.protobuf.out.Match.OptionalIds.serializeBinaryToWriter
    );
  }
  f = message.getModpageid();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getAvailableidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      9,
      f
    );
  }
  f = message.getTeamid();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
};


/**
 * repeated uint32 factoryBans = 1;
 * @return {!Array.<number>}
 */
proto.protobuf.out.Match.Pick.Player.prototype.getFactorybansList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.protobuf.out.Match.Pick.Player.prototype.setFactorybansList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.protobuf.out.Match.Pick.Player.prototype.addFactorybans = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.protobuf.out.Match.Pick.Player.prototype.clearFactorybansList = function() {
  this.setFactorybansList([]);
};


/**
 * repeated uint32 abilityBans = 2;
 * @return {!Array.<number>}
 */
proto.protobuf.out.Match.Pick.Player.prototype.getAbilitybansList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.protobuf.out.Match.Pick.Player.prototype.setAbilitybansList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.protobuf.out.Match.Pick.Player.prototype.addAbilitybans = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.protobuf.out.Match.Pick.Player.prototype.clearAbilitybansList = function() {
  this.setAbilitybansList([]);
};


/**
 * repeated uint32 factoryPicks = 3;
 * @return {!Array.<number>}
 */
proto.protobuf.out.Match.Pick.Player.prototype.getFactorypicksList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<number>} value */
proto.protobuf.out.Match.Pick.Player.prototype.setFactorypicksList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.protobuf.out.Match.Pick.Player.prototype.addFactorypicks = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.protobuf.out.Match.Pick.Player.prototype.clearFactorypicksList = function() {
  this.setFactorypicksList([]);
};


/**
 * repeated uint32 abilityPicks = 4;
 * @return {!Array.<number>}
 */
proto.protobuf.out.Match.Pick.Player.prototype.getAbilitypicksList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<number>} value */
proto.protobuf.out.Match.Pick.Player.prototype.setAbilitypicksList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.protobuf.out.Match.Pick.Player.prototype.addAbilitypicks = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.protobuf.out.Match.Pick.Player.prototype.clearAbilitypicksList = function() {
  this.setAbilitypicksList([]);
};


/**
 * optional uint32 colorID = 5;
 * @return {number}
 */
proto.protobuf.out.Match.Pick.Player.prototype.getColorid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Pick.Player.prototype.setColorid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 emoteID = 6;
 * @return {number}
 */
proto.protobuf.out.Match.Pick.Player.prototype.getEmoteid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Pick.Player.prototype.setEmoteid = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional OptionalIds skins = 7;
 * @return {?proto.protobuf.out.Match.OptionalIds}
 */
proto.protobuf.out.Match.Pick.Player.prototype.getSkins = function() {
  return /** @type{?proto.protobuf.out.Match.OptionalIds} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.out.Match.OptionalIds, 7));
};


/** @param {?proto.protobuf.out.Match.OptionalIds|undefined} value */
proto.protobuf.out.Match.Pick.Player.prototype.setSkins = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.protobuf.out.Match.Pick.Player.prototype.clearSkins = function() {
  this.setSkins(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.out.Match.Pick.Player.prototype.hasSkins = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 modPageId = 8;
 * @return {number}
 */
proto.protobuf.out.Match.Pick.Player.prototype.getModpageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Pick.Player.prototype.setModpageid = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * repeated uint32 availableIDs = 9;
 * @return {!Array.<number>}
 */
proto.protobuf.out.Match.Pick.Player.prototype.getAvailableidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 9));
};


/** @param {!Array.<number>} value */
proto.protobuf.out.Match.Pick.Player.prototype.setAvailableidsList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.protobuf.out.Match.Pick.Player.prototype.addAvailableids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.protobuf.out.Match.Pick.Player.prototype.clearAvailableidsList = function() {
  this.setAvailableidsList([]);
};


/**
 * optional uint32 teamId = 10;
 * @return {number}
 */
proto.protobuf.out.Match.Pick.Player.prototype.getTeamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Pick.Player.prototype.setTeamid = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional State state = 1;
 * @return {!proto.protobuf.out.Match.Pick.State}
 */
proto.protobuf.out.Match.Pick.prototype.getState = function() {
  return /** @type {!proto.protobuf.out.Match.Pick.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.protobuf.out.Match.Pick.State} value */
proto.protobuf.out.Match.Pick.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 time = 2;
 * @return {number}
 */
proto.protobuf.out.Match.Pick.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Pick.prototype.setTime = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated Player player = 3;
 * @return {!Array.<!proto.protobuf.out.Match.Pick.Player>}
 */
proto.protobuf.out.Match.Pick.prototype.getPlayerList = function() {
  return /** @type{!Array.<!proto.protobuf.out.Match.Pick.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobuf.out.Match.Pick.Player, 3));
};


/** @param {!Array.<!proto.protobuf.out.Match.Pick.Player>} value */
proto.protobuf.out.Match.Pick.prototype.setPlayerList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.protobuf.out.Match.Pick.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobuf.out.Match.Pick.Player}
 */
proto.protobuf.out.Match.Pick.prototype.addPlayer = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.protobuf.out.Match.Pick.Player, opt_index);
};


proto.protobuf.out.Match.Pick.prototype.clearPlayerList = function() {
  this.setPlayerList([]);
};


/**
 * optional uint32 playerIndex = 4;
 * @return {number}
 */
proto.protobuf.out.Match.Pick.prototype.getPlayerindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Pick.prototype.setPlayerindex = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 activePlayerIndex = 5;
 * @return {number}
 */
proto.protobuf.out.Match.Pick.prototype.getActiveplayerindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Pick.prototype.setActiveplayerindex = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.out.Match.Game = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protobuf.out.Match.Game.repeatedFields_, null);
};
goog.inherits(proto.protobuf.out.Match.Game, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.out.Match.Game.displayName = 'proto.protobuf.out.Match.Game';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protobuf.out.Match.Game.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.out.Match.Game.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.out.Match.Game.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.out.Match.Game} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerList: jspb.Message.toObjectList(msg.getPlayerList(),
    proto.protobuf.out.Match.Game.Player.toObject, includeInstance),
    playerindex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gametime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    warmuptime: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.out.Match.Game}
 */
proto.protobuf.out.Match.Game.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.out.Match.Game;
  return proto.protobuf.out.Match.Game.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.out.Match.Game} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.out.Match.Game}
 */
proto.protobuf.out.Match.Game.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protobuf.out.Match.Game.Player;
      reader.readMessage(value,proto.protobuf.out.Match.Game.Player.deserializeBinaryFromReader);
      msg.addPlayer(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlayerindex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGametime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWarmuptime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.out.Match.Game.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.out.Match.Game.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.out.Match.Game} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.protobuf.out.Match.Game.Player.serializeBinaryToWriter
    );
  }
  f = message.getPlayerindex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getGametime();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getWarmuptime();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.out.Match.Game.Unit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protobuf.out.Match.Game.Unit.repeatedFields_, null);
};
goog.inherits(proto.protobuf.out.Match.Game.Unit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.out.Match.Game.Unit.displayName = 'proto.protobuf.out.Match.Game.Unit';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protobuf.out.Match.Game.Unit.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.out.Match.Game.Unit.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.out.Match.Game.Unit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.out.Match.Game.Unit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Unit.toObject = function(includeInstance, msg) {
  var f, obj = {
    guid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    position: jspb.Message.getFieldWithDefault(msg, 3, 0),
    hp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    statsList: jspb.Message.getRepeatedFloatingPointField(msg, 5),
    auravisualids: (f = msg.getAuravisualids()) && proto.protobuf.out.Match.OptionalIds.toObject(includeInstance, f),
    state: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.out.Match.Game.Unit}
 */
proto.protobuf.out.Match.Game.Unit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.out.Match.Game.Unit;
  return proto.protobuf.out.Match.Game.Unit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.out.Match.Game.Unit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.out.Match.Game.Unit}
 */
proto.protobuf.out.Match.Game.Unit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPosition(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHp(value);
      break;
    case 5:
      var value = /** @type {!Array.<number>} */ (reader.readPackedFloat());
      msg.setStatsList(value);
      break;
    case 6:
      var value = new proto.protobuf.out.Match.OptionalIds;
      reader.readMessage(value,proto.protobuf.out.Match.OptionalIds.deserializeBinaryFromReader);
      msg.setAuravisualids(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.out.Match.Game.Unit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.out.Match.Game.Unit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.out.Match.Game.Unit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Unit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPosition();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getHp();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getStatsList();
  if (f.length > 0) {
    writer.writePackedFloat(
      5,
      f
    );
  }
  f = message.getAuravisualids();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.protobuf.out.Match.OptionalIds.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * optional uint32 guid = 1;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Unit.prototype.getGuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Unit.prototype.setGuid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 id = 2;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Unit.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Unit.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 position = 3;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Unit.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Unit.prototype.setPosition = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 hp = 4;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Unit.prototype.getHp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Unit.prototype.setHp = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated float stats = 5;
 * @return {!Array.<number>}
 */
proto.protobuf.out.Match.Game.Unit.prototype.getStatsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/** @param {!Array.<number>} value */
proto.protobuf.out.Match.Game.Unit.prototype.setStatsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.protobuf.out.Match.Game.Unit.prototype.addStats = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.protobuf.out.Match.Game.Unit.prototype.clearStatsList = function() {
  this.setStatsList([]);
};


/**
 * optional OptionalIds auraVisualIds = 6;
 * @return {?proto.protobuf.out.Match.OptionalIds}
 */
proto.protobuf.out.Match.Game.Unit.prototype.getAuravisualids = function() {
  return /** @type{?proto.protobuf.out.Match.OptionalIds} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.out.Match.OptionalIds, 6));
};


/** @param {?proto.protobuf.out.Match.OptionalIds|undefined} value */
proto.protobuf.out.Match.Game.Unit.prototype.setAuravisualids = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.protobuf.out.Match.Game.Unit.prototype.clearAuravisualids = function() {
  this.setAuravisualids(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.out.Match.Game.Unit.prototype.hasAuravisualids = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 state = 7;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Unit.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Unit.prototype.setState = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.out.Match.Game.Core = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.out.Match.Game.Core, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.out.Match.Game.Core.displayName = 'proto.protobuf.out.Match.Game.Core';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.out.Match.Game.Core.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.out.Match.Game.Core.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.out.Match.Game.Core} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Core.toObject = function(includeInstance, msg) {
  var f, obj = {
    unit: (f = msg.getUnit()) && proto.protobuf.out.Match.Game.Unit.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.out.Match.Game.Core}
 */
proto.protobuf.out.Match.Game.Core.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.out.Match.Game.Core;
  return proto.protobuf.out.Match.Game.Core.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.out.Match.Game.Core} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.out.Match.Game.Core}
 */
proto.protobuf.out.Match.Game.Core.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protobuf.out.Match.Game.Unit;
      reader.readMessage(value,proto.protobuf.out.Match.Game.Unit.deserializeBinaryFromReader);
      msg.setUnit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.out.Match.Game.Core.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.out.Match.Game.Core.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.out.Match.Game.Core} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Core.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnit();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protobuf.out.Match.Game.Unit.serializeBinaryToWriter
    );
  }
};


/**
 * optional Unit unit = 1;
 * @return {?proto.protobuf.out.Match.Game.Unit}
 */
proto.protobuf.out.Match.Game.Core.prototype.getUnit = function() {
  return /** @type{?proto.protobuf.out.Match.Game.Unit} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.out.Match.Game.Unit, 1));
};


/** @param {?proto.protobuf.out.Match.Game.Unit|undefined} value */
proto.protobuf.out.Match.Game.Core.prototype.setUnit = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protobuf.out.Match.Game.Core.prototype.clearUnit = function() {
  this.setUnit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.out.Match.Game.Core.prototype.hasUnit = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.out.Match.Game.Wall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.out.Match.Game.Wall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.out.Match.Game.Wall.displayName = 'proto.protobuf.out.Match.Game.Wall';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.out.Match.Game.Wall.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.out.Match.Game.Wall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.out.Match.Game.Wall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Wall.toObject = function(includeInstance, msg) {
  var f, obj = {
    unit: (f = msg.getUnit()) && proto.protobuf.out.Match.Game.Unit.toObject(includeInstance, f),
    chainbonus: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.out.Match.Game.Wall}
 */
proto.protobuf.out.Match.Game.Wall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.out.Match.Game.Wall;
  return proto.protobuf.out.Match.Game.Wall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.out.Match.Game.Wall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.out.Match.Game.Wall}
 */
proto.protobuf.out.Match.Game.Wall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protobuf.out.Match.Game.Unit;
      reader.readMessage(value,proto.protobuf.out.Match.Game.Unit.deserializeBinaryFromReader);
      msg.setUnit(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChainbonus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.out.Match.Game.Wall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.out.Match.Game.Wall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.out.Match.Game.Wall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Wall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnit();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protobuf.out.Match.Game.Unit.serializeBinaryToWriter
    );
  }
  f = message.getChainbonus();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional Unit unit = 1;
 * @return {?proto.protobuf.out.Match.Game.Unit}
 */
proto.protobuf.out.Match.Game.Wall.prototype.getUnit = function() {
  return /** @type{?proto.protobuf.out.Match.Game.Unit} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.out.Match.Game.Unit, 1));
};


/** @param {?proto.protobuf.out.Match.Game.Unit|undefined} value */
proto.protobuf.out.Match.Game.Wall.prototype.setUnit = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protobuf.out.Match.Game.Wall.prototype.clearUnit = function() {
  this.setUnit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.out.Match.Game.Wall.prototype.hasUnit = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 chainBonus = 2;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Wall.prototype.getChainbonus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Wall.prototype.setChainbonus = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.out.Match.Game.Tower = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.out.Match.Game.Tower, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.out.Match.Game.Tower.displayName = 'proto.protobuf.out.Match.Game.Tower';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.out.Match.Game.Tower.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.out.Match.Game.Tower.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.out.Match.Game.Tower} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Tower.toObject = function(includeInstance, msg) {
  var f, obj = {
    unit: (f = msg.getUnit()) && proto.protobuf.out.Match.Game.Unit.toObject(includeInstance, f),
    cooldown: jspb.Message.getFieldWithDefault(msg, 2, 0),
    attackprogress: jspb.Message.getFieldWithDefault(msg, 3, 0),
    directionvector: jspb.Message.getFieldWithDefault(msg, 4, 0),
    attackradius: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.out.Match.Game.Tower}
 */
proto.protobuf.out.Match.Game.Tower.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.out.Match.Game.Tower;
  return proto.protobuf.out.Match.Game.Tower.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.out.Match.Game.Tower} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.out.Match.Game.Tower}
 */
proto.protobuf.out.Match.Game.Tower.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protobuf.out.Match.Game.Unit;
      reader.readMessage(value,proto.protobuf.out.Match.Game.Unit.deserializeBinaryFromReader);
      msg.setUnit(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCooldown(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAttackprogress(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDirectionvector(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAttackradius(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.out.Match.Game.Tower.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.out.Match.Game.Tower.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.out.Match.Game.Tower} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Tower.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnit();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protobuf.out.Match.Game.Unit.serializeBinaryToWriter
    );
  }
  f = message.getCooldown();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getAttackprogress();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getDirectionvector();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getAttackradius();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional Unit unit = 1;
 * @return {?proto.protobuf.out.Match.Game.Unit}
 */
proto.protobuf.out.Match.Game.Tower.prototype.getUnit = function() {
  return /** @type{?proto.protobuf.out.Match.Game.Unit} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.out.Match.Game.Unit, 1));
};


/** @param {?proto.protobuf.out.Match.Game.Unit|undefined} value */
proto.protobuf.out.Match.Game.Tower.prototype.setUnit = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protobuf.out.Match.Game.Tower.prototype.clearUnit = function() {
  this.setUnit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.out.Match.Game.Tower.prototype.hasUnit = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 cooldown = 2;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Tower.prototype.getCooldown = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Tower.prototype.setCooldown = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 attackProgress = 3;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Tower.prototype.getAttackprogress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Tower.prototype.setAttackprogress = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 directionVector = 4;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Tower.prototype.getDirectionvector = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Tower.prototype.setDirectionvector = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 attackRadius = 5;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Tower.prototype.getAttackradius = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Tower.prototype.setAttackradius = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.out.Match.Game.Minion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.out.Match.Game.Minion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.out.Match.Game.Minion.displayName = 'proto.protobuf.out.Match.Game.Minion';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.out.Match.Game.Minion.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.out.Match.Game.Minion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.out.Match.Game.Minion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Minion.toObject = function(includeInstance, msg) {
  var f, obj = {
    unit: (f = msg.getUnit()) && proto.protobuf.out.Match.Game.Unit.toObject(includeInstance, f),
    attackprogress: jspb.Message.getFieldWithDefault(msg, 2, 0),
    directionvector: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.out.Match.Game.Minion}
 */
proto.protobuf.out.Match.Game.Minion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.out.Match.Game.Minion;
  return proto.protobuf.out.Match.Game.Minion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.out.Match.Game.Minion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.out.Match.Game.Minion}
 */
proto.protobuf.out.Match.Game.Minion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protobuf.out.Match.Game.Unit;
      reader.readMessage(value,proto.protobuf.out.Match.Game.Unit.deserializeBinaryFromReader);
      msg.setUnit(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAttackprogress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDirectionvector(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.out.Match.Game.Minion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.out.Match.Game.Minion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.out.Match.Game.Minion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Minion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnit();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protobuf.out.Match.Game.Unit.serializeBinaryToWriter
    );
  }
  f = message.getAttackprogress();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDirectionvector();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional Unit unit = 1;
 * @return {?proto.protobuf.out.Match.Game.Unit}
 */
proto.protobuf.out.Match.Game.Minion.prototype.getUnit = function() {
  return /** @type{?proto.protobuf.out.Match.Game.Unit} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.out.Match.Game.Unit, 1));
};


/** @param {?proto.protobuf.out.Match.Game.Unit|undefined} value */
proto.protobuf.out.Match.Game.Minion.prototype.setUnit = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protobuf.out.Match.Game.Minion.prototype.clearUnit = function() {
  this.setUnit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.out.Match.Game.Minion.prototype.hasUnit = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 attackProgress = 2;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Minion.prototype.getAttackprogress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Minion.prototype.setAttackprogress = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 directionVector = 3;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Minion.prototype.getDirectionvector = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Minion.prototype.setDirectionvector = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.out.Match.Game.Projectile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.out.Match.Game.Projectile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.out.Match.Game.Projectile.displayName = 'proto.protobuf.out.Match.Game.Projectile';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.out.Match.Game.Projectile.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.out.Match.Game.Projectile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.out.Match.Game.Projectile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Projectile.toObject = function(includeInstance, msg) {
  var f, obj = {
    unit: (f = msg.getUnit()) && proto.protobuf.out.Match.Game.Unit.toObject(includeInstance, f),
    directionvector: jspb.Message.getFieldWithDefault(msg, 2, 0),
    startposition: jspb.Message.getFieldWithDefault(msg, 3, 0),
    destinationposition: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.out.Match.Game.Projectile}
 */
proto.protobuf.out.Match.Game.Projectile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.out.Match.Game.Projectile;
  return proto.protobuf.out.Match.Game.Projectile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.out.Match.Game.Projectile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.out.Match.Game.Projectile}
 */
proto.protobuf.out.Match.Game.Projectile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protobuf.out.Match.Game.Unit;
      reader.readMessage(value,proto.protobuf.out.Match.Game.Unit.deserializeBinaryFromReader);
      msg.setUnit(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDirectionvector(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartposition(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDestinationposition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.out.Match.Game.Projectile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.out.Match.Game.Projectile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.out.Match.Game.Projectile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Projectile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnit();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protobuf.out.Match.Game.Unit.serializeBinaryToWriter
    );
  }
  f = message.getDirectionvector();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getStartposition();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getDestinationposition();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional Unit unit = 1;
 * @return {?proto.protobuf.out.Match.Game.Unit}
 */
proto.protobuf.out.Match.Game.Projectile.prototype.getUnit = function() {
  return /** @type{?proto.protobuf.out.Match.Game.Unit} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.out.Match.Game.Unit, 1));
};


/** @param {?proto.protobuf.out.Match.Game.Unit|undefined} value */
proto.protobuf.out.Match.Game.Projectile.prototype.setUnit = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protobuf.out.Match.Game.Projectile.prototype.clearUnit = function() {
  this.setUnit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.out.Match.Game.Projectile.prototype.hasUnit = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 directionVector = 2;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Projectile.prototype.getDirectionvector = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Projectile.prototype.setDirectionvector = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 startPosition = 3;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Projectile.prototype.getStartposition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Projectile.prototype.setStartposition = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 destinationPosition = 4;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Projectile.prototype.getDestinationposition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Projectile.prototype.setDestinationposition = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.out.Match.Game.Trigger = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.out.Match.Game.Trigger, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.out.Match.Game.Trigger.displayName = 'proto.protobuf.out.Match.Game.Trigger';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.out.Match.Game.Trigger.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.out.Match.Game.Trigger.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.out.Match.Game.Trigger} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Trigger.toObject = function(includeInstance, msg) {
  var f, obj = {
    unit: (f = msg.getUnit()) && proto.protobuf.out.Match.Game.Unit.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.out.Match.Game.Trigger}
 */
proto.protobuf.out.Match.Game.Trigger.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.out.Match.Game.Trigger;
  return proto.protobuf.out.Match.Game.Trigger.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.out.Match.Game.Trigger} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.out.Match.Game.Trigger}
 */
proto.protobuf.out.Match.Game.Trigger.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protobuf.out.Match.Game.Unit;
      reader.readMessage(value,proto.protobuf.out.Match.Game.Unit.deserializeBinaryFromReader);
      msg.setUnit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.out.Match.Game.Trigger.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.out.Match.Game.Trigger.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.out.Match.Game.Trigger} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Trigger.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnit();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protobuf.out.Match.Game.Unit.serializeBinaryToWriter
    );
  }
};


/**
 * optional Unit unit = 1;
 * @return {?proto.protobuf.out.Match.Game.Unit}
 */
proto.protobuf.out.Match.Game.Trigger.prototype.getUnit = function() {
  return /** @type{?proto.protobuf.out.Match.Game.Unit} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.out.Match.Game.Unit, 1));
};


/** @param {?proto.protobuf.out.Match.Game.Unit|undefined} value */
proto.protobuf.out.Match.Game.Trigger.prototype.setUnit = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protobuf.out.Match.Game.Trigger.prototype.clearUnit = function() {
  this.setUnit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.out.Match.Game.Trigger.prototype.hasUnit = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.out.Match.Game.Visual = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protobuf.out.Match.Game.Visual.oneofGroups_);
};
goog.inherits(proto.protobuf.out.Match.Game.Visual, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.out.Match.Game.Visual.displayName = 'proto.protobuf.out.Match.Game.Visual';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protobuf.out.Match.Game.Visual.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.protobuf.out.Match.Game.Visual.AreaCase = {
  AREA_NOT_SET: 0,
  CIRCLERADIUS: 3,
  RECTSIZE: 4
};

/**
 * @return {proto.protobuf.out.Match.Game.Visual.AreaCase}
 */
proto.protobuf.out.Match.Game.Visual.prototype.getAreaCase = function() {
  return /** @type {proto.protobuf.out.Match.Game.Visual.AreaCase} */(jspb.Message.computeOneofCase(this, proto.protobuf.out.Match.Game.Visual.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.out.Match.Game.Visual.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.out.Match.Game.Visual.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.out.Match.Game.Visual} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Visual.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    position: jspb.Message.getFieldWithDefault(msg, 2, 0),
    circleradius: jspb.Message.getFieldWithDefault(msg, 3, 0),
    rectsize: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.out.Match.Game.Visual}
 */
proto.protobuf.out.Match.Game.Visual.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.out.Match.Game.Visual;
  return proto.protobuf.out.Match.Game.Visual.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.out.Match.Game.Visual} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.out.Match.Game.Visual}
 */
proto.protobuf.out.Match.Game.Visual.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPosition(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCircleradius(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRectsize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.out.Match.Game.Visual.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.out.Match.Game.Visual.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.out.Match.Game.Visual} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Visual.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Visual.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Visual.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 position = 2;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Visual.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Visual.prototype.setPosition = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 circleRadius = 3;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Visual.prototype.getCircleradius = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Visual.prototype.setCircleradius = function(value) {
  jspb.Message.setOneofField(this, 3, proto.protobuf.out.Match.Game.Visual.oneofGroups_[0], value);
};


proto.protobuf.out.Match.Game.Visual.prototype.clearCircleradius = function() {
  jspb.Message.setOneofField(this, 3, proto.protobuf.out.Match.Game.Visual.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.out.Match.Game.Visual.prototype.hasCircleradius = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 rectSize = 4;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Visual.prototype.getRectsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Visual.prototype.setRectsize = function(value) {
  jspb.Message.setOneofField(this, 4, proto.protobuf.out.Match.Game.Visual.oneofGroups_[0], value);
};


proto.protobuf.out.Match.Game.Visual.prototype.clearRectsize = function() {
  jspb.Message.setOneofField(this, 4, proto.protobuf.out.Match.Game.Visual.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.out.Match.Game.Visual.prototype.hasRectsize = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.out.Match.Game.Factory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protobuf.out.Match.Game.Factory.repeatedFields_, proto.protobuf.out.Match.Game.Factory.oneofGroups_);
};
goog.inherits(proto.protobuf.out.Match.Game.Factory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.out.Match.Game.Factory.displayName = 'proto.protobuf.out.Match.Game.Factory';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protobuf.out.Match.Game.Factory.repeatedFields_ = [5];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protobuf.out.Match.Game.Factory.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.protobuf.out.Match.Game.Factory.TypeCase = {
  TYPE_NOT_SET: 0,
  WALL: 2,
  TOWER: 3,
  MINION: 4
};

/**
 * @return {proto.protobuf.out.Match.Game.Factory.TypeCase}
 */
proto.protobuf.out.Match.Game.Factory.prototype.getTypeCase = function() {
  return /** @type {proto.protobuf.out.Match.Game.Factory.TypeCase} */(jspb.Message.computeOneofCase(this, proto.protobuf.out.Match.Game.Factory.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.out.Match.Game.Factory.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.out.Match.Game.Factory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.out.Match.Game.Factory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Factory.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    wall: (f = msg.getWall()) && proto.protobuf.out.Match.Game.Factory.Wall.toObject(includeInstance, f),
    tower: (f = msg.getTower()) && proto.protobuf.out.Match.Game.Factory.Tower.toObject(includeInstance, f),
    minion: (f = msg.getMinion()) && proto.protobuf.out.Match.Game.Factory.Minion.toObject(includeInstance, f),
    statsList: jspb.Message.getRepeatedFloatingPointField(msg, 5),
    auravisualids: (f = msg.getAuravisualids()) && proto.protobuf.out.Match.OptionalIds.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.out.Match.Game.Factory}
 */
proto.protobuf.out.Match.Game.Factory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.out.Match.Game.Factory;
  return proto.protobuf.out.Match.Game.Factory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.out.Match.Game.Factory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.out.Match.Game.Factory}
 */
proto.protobuf.out.Match.Game.Factory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.protobuf.out.Match.Game.Factory.Wall;
      reader.readMessage(value,proto.protobuf.out.Match.Game.Factory.Wall.deserializeBinaryFromReader);
      msg.setWall(value);
      break;
    case 3:
      var value = new proto.protobuf.out.Match.Game.Factory.Tower;
      reader.readMessage(value,proto.protobuf.out.Match.Game.Factory.Tower.deserializeBinaryFromReader);
      msg.setTower(value);
      break;
    case 4:
      var value = new proto.protobuf.out.Match.Game.Factory.Minion;
      reader.readMessage(value,proto.protobuf.out.Match.Game.Factory.Minion.deserializeBinaryFromReader);
      msg.setMinion(value);
      break;
    case 5:
      var value = /** @type {!Array.<number>} */ (reader.readPackedFloat());
      msg.setStatsList(value);
      break;
    case 6:
      var value = new proto.protobuf.out.Match.OptionalIds;
      reader.readMessage(value,proto.protobuf.out.Match.OptionalIds.deserializeBinaryFromReader);
      msg.setAuravisualids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.out.Match.Game.Factory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.out.Match.Game.Factory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.out.Match.Game.Factory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Factory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getWall();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protobuf.out.Match.Game.Factory.Wall.serializeBinaryToWriter
    );
  }
  f = message.getTower();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protobuf.out.Match.Game.Factory.Tower.serializeBinaryToWriter
    );
  }
  f = message.getMinion();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.protobuf.out.Match.Game.Factory.Minion.serializeBinaryToWriter
    );
  }
  f = message.getStatsList();
  if (f.length > 0) {
    writer.writePackedFloat(
      5,
      f
    );
  }
  f = message.getAuravisualids();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.protobuf.out.Match.OptionalIds.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.out.Match.Game.Factory.Wall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.out.Match.Game.Factory.Wall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.out.Match.Game.Factory.Wall.displayName = 'proto.protobuf.out.Match.Game.Factory.Wall';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.out.Match.Game.Factory.Wall.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.out.Match.Game.Factory.Wall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.out.Match.Game.Factory.Wall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Factory.Wall.toObject = function(includeInstance, msg) {
  var f, obj = {
    stacks: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.out.Match.Game.Factory.Wall}
 */
proto.protobuf.out.Match.Game.Factory.Wall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.out.Match.Game.Factory.Wall;
  return proto.protobuf.out.Match.Game.Factory.Wall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.out.Match.Game.Factory.Wall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.out.Match.Game.Factory.Wall}
 */
proto.protobuf.out.Match.Game.Factory.Wall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStacks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.out.Match.Game.Factory.Wall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.out.Match.Game.Factory.Wall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.out.Match.Game.Factory.Wall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Factory.Wall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStacks();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 stacks = 1;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Factory.Wall.prototype.getStacks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Factory.Wall.prototype.setStacks = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.out.Match.Game.Factory.Tower = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.out.Match.Game.Factory.Tower, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.out.Match.Game.Factory.Tower.displayName = 'proto.protobuf.out.Match.Game.Factory.Tower';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.out.Match.Game.Factory.Tower.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.out.Match.Game.Factory.Tower.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.out.Match.Game.Factory.Tower} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Factory.Tower.toObject = function(includeInstance, msg) {
  var f, obj = {
    guid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    level: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cooldown: jspb.Message.getFieldWithDefault(msg, 3, 0),
    upgrades: jspb.Message.getFieldWithDefault(msg, 4, 0),
    targetpreference: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.out.Match.Game.Factory.Tower}
 */
proto.protobuf.out.Match.Game.Factory.Tower.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.out.Match.Game.Factory.Tower;
  return proto.protobuf.out.Match.Game.Factory.Tower.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.out.Match.Game.Factory.Tower} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.out.Match.Game.Factory.Tower}
 */
proto.protobuf.out.Match.Game.Factory.Tower.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLevel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCooldown(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUpgrades(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTargetpreference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.out.Match.Game.Factory.Tower.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.out.Match.Game.Factory.Tower.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.out.Match.Game.Factory.Tower} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Factory.Tower.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getCooldown();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getUpgrades();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getTargetpreference();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 guid = 1;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Factory.Tower.prototype.getGuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Factory.Tower.prototype.setGuid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 level = 2;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Factory.Tower.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Factory.Tower.prototype.setLevel = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 cooldown = 3;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Factory.Tower.prototype.getCooldown = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Factory.Tower.prototype.setCooldown = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 upgrades = 4;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Factory.Tower.prototype.getUpgrades = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Factory.Tower.prototype.setUpgrades = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 targetPreference = 5;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Factory.Tower.prototype.getTargetpreference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Factory.Tower.prototype.setTargetpreference = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.out.Match.Game.Factory.Minion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.out.Match.Game.Factory.Minion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.out.Match.Game.Factory.Minion.displayName = 'proto.protobuf.out.Match.Game.Factory.Minion';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.out.Match.Game.Factory.Minion.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.out.Match.Game.Factory.Minion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.out.Match.Game.Factory.Minion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Factory.Minion.toObject = function(includeInstance, msg) {
  var f, obj = {
    stacks: jspb.Message.getFieldWithDefault(msg, 1, 0),
    level: jspb.Message.getFieldWithDefault(msg, 2, 0),
    targetpreference: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cooldown: jspb.Message.getFieldWithDefault(msg, 4, 0),
    upgrades: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.out.Match.Game.Factory.Minion}
 */
proto.protobuf.out.Match.Game.Factory.Minion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.out.Match.Game.Factory.Minion;
  return proto.protobuf.out.Match.Game.Factory.Minion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.out.Match.Game.Factory.Minion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.out.Match.Game.Factory.Minion}
 */
proto.protobuf.out.Match.Game.Factory.Minion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStacks(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLevel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTargetpreference(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCooldown(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUpgrades(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.out.Match.Game.Factory.Minion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.out.Match.Game.Factory.Minion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.out.Match.Game.Factory.Minion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Factory.Minion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStacks();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTargetpreference();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getCooldown();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getUpgrades();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 stacks = 1;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Factory.Minion.prototype.getStacks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Factory.Minion.prototype.setStacks = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 level = 2;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Factory.Minion.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Factory.Minion.prototype.setLevel = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 targetPreference = 3;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Factory.Minion.prototype.getTargetpreference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Factory.Minion.prototype.setTargetpreference = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 cooldown = 4;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Factory.Minion.prototype.getCooldown = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Factory.Minion.prototype.setCooldown = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 upgrades = 5;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Factory.Minion.prototype.getUpgrades = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Factory.Minion.prototype.setUpgrades = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Factory.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Factory.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Wall wall = 2;
 * @return {?proto.protobuf.out.Match.Game.Factory.Wall}
 */
proto.protobuf.out.Match.Game.Factory.prototype.getWall = function() {
  return /** @type{?proto.protobuf.out.Match.Game.Factory.Wall} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.out.Match.Game.Factory.Wall, 2));
};


/** @param {?proto.protobuf.out.Match.Game.Factory.Wall|undefined} value */
proto.protobuf.out.Match.Game.Factory.prototype.setWall = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.protobuf.out.Match.Game.Factory.oneofGroups_[0], value);
};


proto.protobuf.out.Match.Game.Factory.prototype.clearWall = function() {
  this.setWall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.out.Match.Game.Factory.prototype.hasWall = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Tower tower = 3;
 * @return {?proto.protobuf.out.Match.Game.Factory.Tower}
 */
proto.protobuf.out.Match.Game.Factory.prototype.getTower = function() {
  return /** @type{?proto.protobuf.out.Match.Game.Factory.Tower} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.out.Match.Game.Factory.Tower, 3));
};


/** @param {?proto.protobuf.out.Match.Game.Factory.Tower|undefined} value */
proto.protobuf.out.Match.Game.Factory.prototype.setTower = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.protobuf.out.Match.Game.Factory.oneofGroups_[0], value);
};


proto.protobuf.out.Match.Game.Factory.prototype.clearTower = function() {
  this.setTower(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.out.Match.Game.Factory.prototype.hasTower = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Minion minion = 4;
 * @return {?proto.protobuf.out.Match.Game.Factory.Minion}
 */
proto.protobuf.out.Match.Game.Factory.prototype.getMinion = function() {
  return /** @type{?proto.protobuf.out.Match.Game.Factory.Minion} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.out.Match.Game.Factory.Minion, 4));
};


/** @param {?proto.protobuf.out.Match.Game.Factory.Minion|undefined} value */
proto.protobuf.out.Match.Game.Factory.prototype.setMinion = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.protobuf.out.Match.Game.Factory.oneofGroups_[0], value);
};


proto.protobuf.out.Match.Game.Factory.prototype.clearMinion = function() {
  this.setMinion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.out.Match.Game.Factory.prototype.hasMinion = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated float stats = 5;
 * @return {!Array.<number>}
 */
proto.protobuf.out.Match.Game.Factory.prototype.getStatsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/** @param {!Array.<number>} value */
proto.protobuf.out.Match.Game.Factory.prototype.setStatsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.protobuf.out.Match.Game.Factory.prototype.addStats = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.protobuf.out.Match.Game.Factory.prototype.clearStatsList = function() {
  this.setStatsList([]);
};


/**
 * optional OptionalIds auraVisualIds = 6;
 * @return {?proto.protobuf.out.Match.OptionalIds}
 */
proto.protobuf.out.Match.Game.Factory.prototype.getAuravisualids = function() {
  return /** @type{?proto.protobuf.out.Match.OptionalIds} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.out.Match.OptionalIds, 6));
};


/** @param {?proto.protobuf.out.Match.OptionalIds|undefined} value */
proto.protobuf.out.Match.Game.Factory.prototype.setAuravisualids = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.protobuf.out.Match.Game.Factory.prototype.clearAuravisualids = function() {
  this.setAuravisualids(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.out.Match.Game.Factory.prototype.hasAuravisualids = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.out.Match.Game.Ability = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protobuf.out.Match.Game.Ability.repeatedFields_, null);
};
goog.inherits(proto.protobuf.out.Match.Game.Ability, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.out.Match.Game.Ability.displayName = 'proto.protobuf.out.Match.Game.Ability';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protobuf.out.Match.Game.Ability.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.out.Match.Game.Ability.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.out.Match.Game.Ability.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.out.Match.Game.Ability} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Ability.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cooldown: jspb.Message.getFieldWithDefault(msg, 2, 0),
    statsList: jspb.Message.getRepeatedFloatingPointField(msg, 3),
    auravisualids: (f = msg.getAuravisualids()) && proto.protobuf.out.Match.OptionalIds.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.out.Match.Game.Ability}
 */
proto.protobuf.out.Match.Game.Ability.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.out.Match.Game.Ability;
  return proto.protobuf.out.Match.Game.Ability.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.out.Match.Game.Ability} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.out.Match.Game.Ability}
 */
proto.protobuf.out.Match.Game.Ability.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCooldown(value);
      break;
    case 3:
      var value = /** @type {!Array.<number>} */ (reader.readPackedFloat());
      msg.setStatsList(value);
      break;
    case 4:
      var value = new proto.protobuf.out.Match.OptionalIds;
      reader.readMessage(value,proto.protobuf.out.Match.OptionalIds.deserializeBinaryFromReader);
      msg.setAuravisualids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.out.Match.Game.Ability.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.out.Match.Game.Ability.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.out.Match.Game.Ability} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Ability.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCooldown();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getStatsList();
  if (f.length > 0) {
    writer.writePackedFloat(
      3,
      f
    );
  }
  f = message.getAuravisualids();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.protobuf.out.Match.OptionalIds.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Ability.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Ability.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 cooldown = 2;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Ability.prototype.getCooldown = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Ability.prototype.setCooldown = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated float stats = 3;
 * @return {!Array.<number>}
 */
proto.protobuf.out.Match.Game.Ability.prototype.getStatsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/** @param {!Array.<number>} value */
proto.protobuf.out.Match.Game.Ability.prototype.setStatsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.protobuf.out.Match.Game.Ability.prototype.addStats = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.protobuf.out.Match.Game.Ability.prototype.clearStatsList = function() {
  this.setStatsList([]);
};


/**
 * optional OptionalIds auraVisualIds = 4;
 * @return {?proto.protobuf.out.Match.OptionalIds}
 */
proto.protobuf.out.Match.Game.Ability.prototype.getAuravisualids = function() {
  return /** @type{?proto.protobuf.out.Match.OptionalIds} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.out.Match.OptionalIds, 4));
};


/** @param {?proto.protobuf.out.Match.OptionalIds|undefined} value */
proto.protobuf.out.Match.Game.Ability.prototype.setAuravisualids = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.protobuf.out.Match.Game.Ability.prototype.clearAuravisualids = function() {
  this.setAuravisualids(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.out.Match.Game.Ability.prototype.hasAuravisualids = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.out.Match.Game.OptionalGUID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.out.Match.Game.OptionalGUID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.out.Match.Game.OptionalGUID.displayName = 'proto.protobuf.out.Match.Game.OptionalGUID';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.out.Match.Game.OptionalGUID.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.out.Match.Game.OptionalGUID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.out.Match.Game.OptionalGUID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.OptionalGUID.toObject = function(includeInstance, msg) {
  var f, obj = {
    isset: jspb.Message.getFieldWithDefault(msg, 1, false),
    guid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.out.Match.Game.OptionalGUID}
 */
proto.protobuf.out.Match.Game.OptionalGUID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.out.Match.Game.OptionalGUID;
  return proto.protobuf.out.Match.Game.OptionalGUID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.out.Match.Game.OptionalGUID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.out.Match.Game.OptionalGUID}
 */
proto.protobuf.out.Match.Game.OptionalGUID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.out.Match.Game.OptionalGUID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.out.Match.Game.OptionalGUID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.out.Match.Game.OptionalGUID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.OptionalGUID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsset();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getGuid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bool isSet = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protobuf.out.Match.Game.OptionalGUID.prototype.getIsset = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.protobuf.out.Match.Game.OptionalGUID.prototype.setIsset = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional uint32 guid = 2;
 * @return {number}
 */
proto.protobuf.out.Match.Game.OptionalGUID.prototype.getGuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.OptionalGUID.prototype.setGuid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.out.Match.Game.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protobuf.out.Match.Game.Player.repeatedFields_, null);
};
goog.inherits(proto.protobuf.out.Match.Game.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.out.Match.Game.Player.displayName = 'proto.protobuf.out.Match.Game.Player';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protobuf.out.Match.Game.Player.repeatedFields_ = [4,5,6,7,8,9,11,12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.out.Match.Game.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.out.Match.Game.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.out.Match.Game.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    colorid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minionlimit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    core: (f = msg.getCore()) && proto.protobuf.out.Match.Game.Core.toObject(includeInstance, f),
    wallsList: jspb.Message.toObjectList(msg.getWallsList(),
    proto.protobuf.out.Match.Game.Wall.toObject, includeInstance),
    towersList: jspb.Message.toObjectList(msg.getTowersList(),
    proto.protobuf.out.Match.Game.Tower.toObject, includeInstance),
    minionsList: jspb.Message.toObjectList(msg.getMinionsList(),
    proto.protobuf.out.Match.Game.Minion.toObject, includeInstance),
    projectilesList: jspb.Message.toObjectList(msg.getProjectilesList(),
    proto.protobuf.out.Match.Game.Projectile.toObject, includeInstance),
    triggersList: jspb.Message.toObjectList(msg.getTriggersList(),
    proto.protobuf.out.Match.Game.Trigger.toObject, includeInstance),
    visualsList: jspb.Message.toObjectList(msg.getVisualsList(),
    proto.protobuf.out.Match.Game.Visual.toObject, includeInstance),
    emoteid: jspb.Message.getFieldWithDefault(msg, 10, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 19, 0),
    skins: (f = msg.getSkins()) && proto.protobuf.out.Match.OptionalIds.toObject(includeInstance, f),
    factoriesList: jspb.Message.toObjectList(msg.getFactoriesList(),
    proto.protobuf.out.Match.Game.Factory.toObject, includeInstance),
    abilitiesList: jspb.Message.toObjectList(msg.getAbilitiesList(),
    proto.protobuf.out.Match.Game.Ability.toObject, includeInstance),
    visibilitymap: msg.getVisibilitymap_asB64(),
    buildingmap: msg.getBuildingmap_asB64(),
    globaltarget: (f = msg.getGlobaltarget()) && proto.protobuf.out.Match.Game.OptionalGUID.toObject(includeInstance, f),
    flags: jspb.Message.getFieldWithDefault(msg, 16, 0),
    foremostminion: (f = msg.getForemostminion()) && proto.protobuf.out.Match.Game.OptionalGUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.out.Match.Game.Player}
 */
proto.protobuf.out.Match.Game.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.out.Match.Game.Player;
  return proto.protobuf.out.Match.Game.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.out.Match.Game.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.out.Match.Game.Player}
 */
proto.protobuf.out.Match.Game.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setColorid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinionlimit(value);
      break;
    case 3:
      var value = new proto.protobuf.out.Match.Game.Core;
      reader.readMessage(value,proto.protobuf.out.Match.Game.Core.deserializeBinaryFromReader);
      msg.setCore(value);
      break;
    case 4:
      var value = new proto.protobuf.out.Match.Game.Wall;
      reader.readMessage(value,proto.protobuf.out.Match.Game.Wall.deserializeBinaryFromReader);
      msg.addWalls(value);
      break;
    case 5:
      var value = new proto.protobuf.out.Match.Game.Tower;
      reader.readMessage(value,proto.protobuf.out.Match.Game.Tower.deserializeBinaryFromReader);
      msg.addTowers(value);
      break;
    case 6:
      var value = new proto.protobuf.out.Match.Game.Minion;
      reader.readMessage(value,proto.protobuf.out.Match.Game.Minion.deserializeBinaryFromReader);
      msg.addMinions(value);
      break;
    case 7:
      var value = new proto.protobuf.out.Match.Game.Projectile;
      reader.readMessage(value,proto.protobuf.out.Match.Game.Projectile.deserializeBinaryFromReader);
      msg.addProjectiles(value);
      break;
    case 8:
      var value = new proto.protobuf.out.Match.Game.Trigger;
      reader.readMessage(value,proto.protobuf.out.Match.Game.Trigger.deserializeBinaryFromReader);
      msg.addTriggers(value);
      break;
    case 9:
      var value = new proto.protobuf.out.Match.Game.Visual;
      reader.readMessage(value,proto.protobuf.out.Match.Game.Visual.deserializeBinaryFromReader);
      msg.addVisuals(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEmoteid(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTeamid(value);
      break;
    case 18:
      var value = new proto.protobuf.out.Match.OptionalIds;
      reader.readMessage(value,proto.protobuf.out.Match.OptionalIds.deserializeBinaryFromReader);
      msg.setSkins(value);
      break;
    case 11:
      var value = new proto.protobuf.out.Match.Game.Factory;
      reader.readMessage(value,proto.protobuf.out.Match.Game.Factory.deserializeBinaryFromReader);
      msg.addFactories(value);
      break;
    case 12:
      var value = new proto.protobuf.out.Match.Game.Ability;
      reader.readMessage(value,proto.protobuf.out.Match.Game.Ability.deserializeBinaryFromReader);
      msg.addAbilities(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVisibilitymap(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBuildingmap(value);
      break;
    case 15:
      var value = new proto.protobuf.out.Match.Game.OptionalGUID;
      reader.readMessage(value,proto.protobuf.out.Match.Game.OptionalGUID.deserializeBinaryFromReader);
      msg.setGlobaltarget(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlags(value);
      break;
    case 17:
      var value = new proto.protobuf.out.Match.Game.OptionalGUID;
      reader.readMessage(value,proto.protobuf.out.Match.Game.OptionalGUID.deserializeBinaryFromReader);
      msg.setForemostminion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.out.Match.Game.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.out.Match.Game.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.out.Match.Game.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Game.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColorid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMinionlimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getCore();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protobuf.out.Match.Game.Core.serializeBinaryToWriter
    );
  }
  f = message.getWallsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.protobuf.out.Match.Game.Wall.serializeBinaryToWriter
    );
  }
  f = message.getTowersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.protobuf.out.Match.Game.Tower.serializeBinaryToWriter
    );
  }
  f = message.getMinionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.protobuf.out.Match.Game.Minion.serializeBinaryToWriter
    );
  }
  f = message.getProjectilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.protobuf.out.Match.Game.Projectile.serializeBinaryToWriter
    );
  }
  f = message.getTriggersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.protobuf.out.Match.Game.Trigger.serializeBinaryToWriter
    );
  }
  f = message.getVisualsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.protobuf.out.Match.Game.Visual.serializeBinaryToWriter
    );
  }
  f = message.getEmoteid();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getTeamid();
  if (f !== 0) {
    writer.writeUint32(
      19,
      f
    );
  }
  f = message.getSkins();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.protobuf.out.Match.OptionalIds.serializeBinaryToWriter
    );
  }
  f = message.getFactoriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.protobuf.out.Match.Game.Factory.serializeBinaryToWriter
    );
  }
  f = message.getAbilitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.protobuf.out.Match.Game.Ability.serializeBinaryToWriter
    );
  }
  f = message.getVisibilitymap_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getBuildingmap_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = message.getGlobaltarget();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.protobuf.out.Match.Game.OptionalGUID.serializeBinaryToWriter
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint32(
      16,
      f
    );
  }
  f = message.getForemostminion();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.protobuf.out.Match.Game.OptionalGUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 colorID = 1;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Player.prototype.getColorid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Player.prototype.setColorid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 minionLimit = 2;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Player.prototype.getMinionlimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Player.prototype.setMinionlimit = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Core core = 3;
 * @return {?proto.protobuf.out.Match.Game.Core}
 */
proto.protobuf.out.Match.Game.Player.prototype.getCore = function() {
  return /** @type{?proto.protobuf.out.Match.Game.Core} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.out.Match.Game.Core, 3));
};


/** @param {?proto.protobuf.out.Match.Game.Core|undefined} value */
proto.protobuf.out.Match.Game.Player.prototype.setCore = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.protobuf.out.Match.Game.Player.prototype.clearCore = function() {
  this.setCore(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.out.Match.Game.Player.prototype.hasCore = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Wall walls = 4;
 * @return {!Array.<!proto.protobuf.out.Match.Game.Wall>}
 */
proto.protobuf.out.Match.Game.Player.prototype.getWallsList = function() {
  return /** @type{!Array.<!proto.protobuf.out.Match.Game.Wall>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobuf.out.Match.Game.Wall, 4));
};


/** @param {!Array.<!proto.protobuf.out.Match.Game.Wall>} value */
proto.protobuf.out.Match.Game.Player.prototype.setWallsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.protobuf.out.Match.Game.Wall=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobuf.out.Match.Game.Wall}
 */
proto.protobuf.out.Match.Game.Player.prototype.addWalls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.protobuf.out.Match.Game.Wall, opt_index);
};


proto.protobuf.out.Match.Game.Player.prototype.clearWallsList = function() {
  this.setWallsList([]);
};


/**
 * repeated Tower towers = 5;
 * @return {!Array.<!proto.protobuf.out.Match.Game.Tower>}
 */
proto.protobuf.out.Match.Game.Player.prototype.getTowersList = function() {
  return /** @type{!Array.<!proto.protobuf.out.Match.Game.Tower>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobuf.out.Match.Game.Tower, 5));
};


/** @param {!Array.<!proto.protobuf.out.Match.Game.Tower>} value */
proto.protobuf.out.Match.Game.Player.prototype.setTowersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.protobuf.out.Match.Game.Tower=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobuf.out.Match.Game.Tower}
 */
proto.protobuf.out.Match.Game.Player.prototype.addTowers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.protobuf.out.Match.Game.Tower, opt_index);
};


proto.protobuf.out.Match.Game.Player.prototype.clearTowersList = function() {
  this.setTowersList([]);
};


/**
 * repeated Minion minions = 6;
 * @return {!Array.<!proto.protobuf.out.Match.Game.Minion>}
 */
proto.protobuf.out.Match.Game.Player.prototype.getMinionsList = function() {
  return /** @type{!Array.<!proto.protobuf.out.Match.Game.Minion>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobuf.out.Match.Game.Minion, 6));
};


/** @param {!Array.<!proto.protobuf.out.Match.Game.Minion>} value */
proto.protobuf.out.Match.Game.Player.prototype.setMinionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.protobuf.out.Match.Game.Minion=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobuf.out.Match.Game.Minion}
 */
proto.protobuf.out.Match.Game.Player.prototype.addMinions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.protobuf.out.Match.Game.Minion, opt_index);
};


proto.protobuf.out.Match.Game.Player.prototype.clearMinionsList = function() {
  this.setMinionsList([]);
};


/**
 * repeated Projectile projectiles = 7;
 * @return {!Array.<!proto.protobuf.out.Match.Game.Projectile>}
 */
proto.protobuf.out.Match.Game.Player.prototype.getProjectilesList = function() {
  return /** @type{!Array.<!proto.protobuf.out.Match.Game.Projectile>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobuf.out.Match.Game.Projectile, 7));
};


/** @param {!Array.<!proto.protobuf.out.Match.Game.Projectile>} value */
proto.protobuf.out.Match.Game.Player.prototype.setProjectilesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.protobuf.out.Match.Game.Projectile=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobuf.out.Match.Game.Projectile}
 */
proto.protobuf.out.Match.Game.Player.prototype.addProjectiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.protobuf.out.Match.Game.Projectile, opt_index);
};


proto.protobuf.out.Match.Game.Player.prototype.clearProjectilesList = function() {
  this.setProjectilesList([]);
};


/**
 * repeated Trigger triggers = 8;
 * @return {!Array.<!proto.protobuf.out.Match.Game.Trigger>}
 */
proto.protobuf.out.Match.Game.Player.prototype.getTriggersList = function() {
  return /** @type{!Array.<!proto.protobuf.out.Match.Game.Trigger>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobuf.out.Match.Game.Trigger, 8));
};


/** @param {!Array.<!proto.protobuf.out.Match.Game.Trigger>} value */
proto.protobuf.out.Match.Game.Player.prototype.setTriggersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.protobuf.out.Match.Game.Trigger=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobuf.out.Match.Game.Trigger}
 */
proto.protobuf.out.Match.Game.Player.prototype.addTriggers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.protobuf.out.Match.Game.Trigger, opt_index);
};


proto.protobuf.out.Match.Game.Player.prototype.clearTriggersList = function() {
  this.setTriggersList([]);
};


/**
 * repeated Visual visuals = 9;
 * @return {!Array.<!proto.protobuf.out.Match.Game.Visual>}
 */
proto.protobuf.out.Match.Game.Player.prototype.getVisualsList = function() {
  return /** @type{!Array.<!proto.protobuf.out.Match.Game.Visual>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobuf.out.Match.Game.Visual, 9));
};


/** @param {!Array.<!proto.protobuf.out.Match.Game.Visual>} value */
proto.protobuf.out.Match.Game.Player.prototype.setVisualsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.protobuf.out.Match.Game.Visual=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobuf.out.Match.Game.Visual}
 */
proto.protobuf.out.Match.Game.Player.prototype.addVisuals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.protobuf.out.Match.Game.Visual, opt_index);
};


proto.protobuf.out.Match.Game.Player.prototype.clearVisualsList = function() {
  this.setVisualsList([]);
};


/**
 * optional uint32 emoteId = 10;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Player.prototype.getEmoteid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Player.prototype.setEmoteid = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint32 teamId = 19;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Player.prototype.getTeamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Player.prototype.setTeamid = function(value) {
  jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional OptionalIds skins = 18;
 * @return {?proto.protobuf.out.Match.OptionalIds}
 */
proto.protobuf.out.Match.Game.Player.prototype.getSkins = function() {
  return /** @type{?proto.protobuf.out.Match.OptionalIds} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.out.Match.OptionalIds, 18));
};


/** @param {?proto.protobuf.out.Match.OptionalIds|undefined} value */
proto.protobuf.out.Match.Game.Player.prototype.setSkins = function(value) {
  jspb.Message.setWrapperField(this, 18, value);
};


proto.protobuf.out.Match.Game.Player.prototype.clearSkins = function() {
  this.setSkins(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.out.Match.Game.Player.prototype.hasSkins = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * repeated Factory factories = 11;
 * @return {!Array.<!proto.protobuf.out.Match.Game.Factory>}
 */
proto.protobuf.out.Match.Game.Player.prototype.getFactoriesList = function() {
  return /** @type{!Array.<!proto.protobuf.out.Match.Game.Factory>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobuf.out.Match.Game.Factory, 11));
};


/** @param {!Array.<!proto.protobuf.out.Match.Game.Factory>} value */
proto.protobuf.out.Match.Game.Player.prototype.setFactoriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.protobuf.out.Match.Game.Factory=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobuf.out.Match.Game.Factory}
 */
proto.protobuf.out.Match.Game.Player.prototype.addFactories = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.protobuf.out.Match.Game.Factory, opt_index);
};


proto.protobuf.out.Match.Game.Player.prototype.clearFactoriesList = function() {
  this.setFactoriesList([]);
};


/**
 * repeated Ability abilities = 12;
 * @return {!Array.<!proto.protobuf.out.Match.Game.Ability>}
 */
proto.protobuf.out.Match.Game.Player.prototype.getAbilitiesList = function() {
  return /** @type{!Array.<!proto.protobuf.out.Match.Game.Ability>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobuf.out.Match.Game.Ability, 12));
};


/** @param {!Array.<!proto.protobuf.out.Match.Game.Ability>} value */
proto.protobuf.out.Match.Game.Player.prototype.setAbilitiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.protobuf.out.Match.Game.Ability=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobuf.out.Match.Game.Ability}
 */
proto.protobuf.out.Match.Game.Player.prototype.addAbilities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.protobuf.out.Match.Game.Ability, opt_index);
};


proto.protobuf.out.Match.Game.Player.prototype.clearAbilitiesList = function() {
  this.setAbilitiesList([]);
};


/**
 * optional bytes visibilityMap = 13;
 * @return {!(string|Uint8Array)}
 */
proto.protobuf.out.Match.Game.Player.prototype.getVisibilitymap = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes visibilityMap = 13;
 * This is a type-conversion wrapper around `getVisibilitymap()`
 * @return {string}
 */
proto.protobuf.out.Match.Game.Player.prototype.getVisibilitymap_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVisibilitymap()));
};


/**
 * optional bytes visibilityMap = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVisibilitymap()`
 * @return {!Uint8Array}
 */
proto.protobuf.out.Match.Game.Player.prototype.getVisibilitymap_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVisibilitymap()));
};


/** @param {!(string|Uint8Array)} value */
proto.protobuf.out.Match.Game.Player.prototype.setVisibilitymap = function(value) {
  jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * optional bytes buildingMap = 14;
 * @return {!(string|Uint8Array)}
 */
proto.protobuf.out.Match.Game.Player.prototype.getBuildingmap = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes buildingMap = 14;
 * This is a type-conversion wrapper around `getBuildingmap()`
 * @return {string}
 */
proto.protobuf.out.Match.Game.Player.prototype.getBuildingmap_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBuildingmap()));
};


/**
 * optional bytes buildingMap = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBuildingmap()`
 * @return {!Uint8Array}
 */
proto.protobuf.out.Match.Game.Player.prototype.getBuildingmap_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBuildingmap()));
};


/** @param {!(string|Uint8Array)} value */
proto.protobuf.out.Match.Game.Player.prototype.setBuildingmap = function(value) {
  jspb.Message.setProto3BytesField(this, 14, value);
};


/**
 * optional OptionalGUID globalTarget = 15;
 * @return {?proto.protobuf.out.Match.Game.OptionalGUID}
 */
proto.protobuf.out.Match.Game.Player.prototype.getGlobaltarget = function() {
  return /** @type{?proto.protobuf.out.Match.Game.OptionalGUID} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.out.Match.Game.OptionalGUID, 15));
};


/** @param {?proto.protobuf.out.Match.Game.OptionalGUID|undefined} value */
proto.protobuf.out.Match.Game.Player.prototype.setGlobaltarget = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.protobuf.out.Match.Game.Player.prototype.clearGlobaltarget = function() {
  this.setGlobaltarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.out.Match.Game.Player.prototype.hasGlobaltarget = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional uint32 flags = 16;
 * @return {number}
 */
proto.protobuf.out.Match.Game.Player.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.Player.prototype.setFlags = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional OptionalGUID foremostMinion = 17;
 * @return {?proto.protobuf.out.Match.Game.OptionalGUID}
 */
proto.protobuf.out.Match.Game.Player.prototype.getForemostminion = function() {
  return /** @type{?proto.protobuf.out.Match.Game.OptionalGUID} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.out.Match.Game.OptionalGUID, 17));
};


/** @param {?proto.protobuf.out.Match.Game.OptionalGUID|undefined} value */
proto.protobuf.out.Match.Game.Player.prototype.setForemostminion = function(value) {
  jspb.Message.setWrapperField(this, 17, value);
};


proto.protobuf.out.Match.Game.Player.prototype.clearForemostminion = function() {
  this.setForemostminion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.out.Match.Game.Player.prototype.hasForemostminion = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * repeated Player player = 1;
 * @return {!Array.<!proto.protobuf.out.Match.Game.Player>}
 */
proto.protobuf.out.Match.Game.prototype.getPlayerList = function() {
  return /** @type{!Array.<!proto.protobuf.out.Match.Game.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobuf.out.Match.Game.Player, 1));
};


/** @param {!Array.<!proto.protobuf.out.Match.Game.Player>} value */
proto.protobuf.out.Match.Game.prototype.setPlayerList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.protobuf.out.Match.Game.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobuf.out.Match.Game.Player}
 */
proto.protobuf.out.Match.Game.prototype.addPlayer = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.protobuf.out.Match.Game.Player, opt_index);
};


proto.protobuf.out.Match.Game.prototype.clearPlayerList = function() {
  this.setPlayerList([]);
};


/**
 * optional uint32 playerIndex = 2;
 * @return {number}
 */
proto.protobuf.out.Match.Game.prototype.getPlayerindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.prototype.setPlayerindex = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 gameTime = 3;
 * @return {number}
 */
proto.protobuf.out.Match.Game.prototype.getGametime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.prototype.setGametime = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 warmUpTime = 4;
 * @return {number}
 */
proto.protobuf.out.Match.Game.prototype.getWarmuptime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Game.prototype.setWarmuptime = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.out.Match.Finalize = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protobuf.out.Match.Finalize.repeatedFields_, null);
};
goog.inherits(proto.protobuf.out.Match.Finalize, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.out.Match.Finalize.displayName = 'proto.protobuf.out.Match.Finalize';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protobuf.out.Match.Finalize.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.out.Match.Finalize.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.out.Match.Finalize.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.out.Match.Finalize} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Finalize.toObject = function(includeInstance, msg) {
  var f, obj = {
    playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.protobuf.out.Match.Finalize.Player.toObject, includeInstance),
    playerindex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    permmatchid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timeleft: jspb.Message.getFieldWithDefault(msg, 4, 0),
    winningteamid: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.out.Match.Finalize}
 */
proto.protobuf.out.Match.Finalize.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.out.Match.Finalize;
  return proto.protobuf.out.Match.Finalize.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.out.Match.Finalize} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.out.Match.Finalize}
 */
proto.protobuf.out.Match.Finalize.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protobuf.out.Match.Finalize.Player;
      reader.readMessage(value,proto.protobuf.out.Match.Finalize.Player.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlayerindex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPermmatchid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimeleft(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWinningteamid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.out.Match.Finalize.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.out.Match.Finalize.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.out.Match.Finalize} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Finalize.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.protobuf.out.Match.Finalize.Player.serializeBinaryToWriter
    );
  }
  f = message.getPlayerindex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPermmatchid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getTimeleft();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getWinningteamid();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.out.Match.Finalize.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.out.Match.Finalize.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.out.Match.Finalize.Player.displayName = 'proto.protobuf.out.Match.Finalize.Player';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.out.Match.Finalize.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.out.Match.Finalize.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.out.Match.Finalize.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Finalize.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    colorid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    icon: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: (f = msg.getName()) && proto.protobuf.out.Match.OptionalString.toObject(includeInstance, f),
    emoteid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.out.Match.Finalize.Player}
 */
proto.protobuf.out.Match.Finalize.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.out.Match.Finalize.Player;
  return proto.protobuf.out.Match.Finalize.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.out.Match.Finalize.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.out.Match.Finalize.Player}
 */
proto.protobuf.out.Match.Finalize.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setColorid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIcon(value);
      break;
    case 3:
      var value = new proto.protobuf.out.Match.OptionalString;
      reader.readMessage(value,proto.protobuf.out.Match.OptionalString.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEmoteid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTeamid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.out.Match.Finalize.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.out.Match.Finalize.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.out.Match.Finalize.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Match.Finalize.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColorid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getIcon();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protobuf.out.Match.OptionalString.serializeBinaryToWriter
    );
  }
  f = message.getEmoteid();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getTeamid();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 colorID = 1;
 * @return {number}
 */
proto.protobuf.out.Match.Finalize.Player.prototype.getColorid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Finalize.Player.prototype.setColorid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 icon = 2;
 * @return {number}
 */
proto.protobuf.out.Match.Finalize.Player.prototype.getIcon = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Finalize.Player.prototype.setIcon = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional OptionalString name = 3;
 * @return {?proto.protobuf.out.Match.OptionalString}
 */
proto.protobuf.out.Match.Finalize.Player.prototype.getName = function() {
  return /** @type{?proto.protobuf.out.Match.OptionalString} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.out.Match.OptionalString, 3));
};


/** @param {?proto.protobuf.out.Match.OptionalString|undefined} value */
proto.protobuf.out.Match.Finalize.Player.prototype.setName = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.protobuf.out.Match.Finalize.Player.prototype.clearName = function() {
  this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.out.Match.Finalize.Player.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 emoteId = 4;
 * @return {number}
 */
proto.protobuf.out.Match.Finalize.Player.prototype.getEmoteid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Finalize.Player.prototype.setEmoteid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 teamId = 5;
 * @return {number}
 */
proto.protobuf.out.Match.Finalize.Player.prototype.getTeamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Finalize.Player.prototype.setTeamid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated Player players = 1;
 * @return {!Array.<!proto.protobuf.out.Match.Finalize.Player>}
 */
proto.protobuf.out.Match.Finalize.prototype.getPlayersList = function() {
  return /** @type{!Array.<!proto.protobuf.out.Match.Finalize.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobuf.out.Match.Finalize.Player, 1));
};


/** @param {!Array.<!proto.protobuf.out.Match.Finalize.Player>} value */
proto.protobuf.out.Match.Finalize.prototype.setPlayersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.protobuf.out.Match.Finalize.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobuf.out.Match.Finalize.Player}
 */
proto.protobuf.out.Match.Finalize.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.protobuf.out.Match.Finalize.Player, opt_index);
};


proto.protobuf.out.Match.Finalize.prototype.clearPlayersList = function() {
  this.setPlayersList([]);
};


/**
 * optional uint32 playerIndex = 2;
 * @return {number}
 */
proto.protobuf.out.Match.Finalize.prototype.getPlayerindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Finalize.prototype.setPlayerindex = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 permMatchId = 3;
 * @return {number}
 */
proto.protobuf.out.Match.Finalize.prototype.getPermmatchid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Finalize.prototype.setPermmatchid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 timeLeft = 4;
 * @return {number}
 */
proto.protobuf.out.Match.Finalize.prototype.getTimeleft = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Finalize.prototype.setTimeleft = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 winningTeamId = 5;
 * @return {number}
 */
proto.protobuf.out.Match.Finalize.prototype.getWinningteamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protobuf.out.Match.Finalize.prototype.setWinningteamid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Pick pick = 1;
 * @return {?proto.protobuf.out.Match.Pick}
 */
proto.protobuf.out.Match.prototype.getPick = function() {
  return /** @type{?proto.protobuf.out.Match.Pick} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.out.Match.Pick, 1));
};


/** @param {?proto.protobuf.out.Match.Pick|undefined} value */
proto.protobuf.out.Match.prototype.setPick = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.protobuf.out.Match.oneofGroups_[0], value);
};


proto.protobuf.out.Match.prototype.clearPick = function() {
  this.setPick(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.out.Match.prototype.hasPick = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Game game = 2;
 * @return {?proto.protobuf.out.Match.Game}
 */
proto.protobuf.out.Match.prototype.getGame = function() {
  return /** @type{?proto.protobuf.out.Match.Game} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.out.Match.Game, 2));
};


/** @param {?proto.protobuf.out.Match.Game|undefined} value */
proto.protobuf.out.Match.prototype.setGame = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.protobuf.out.Match.oneofGroups_[0], value);
};


proto.protobuf.out.Match.prototype.clearGame = function() {
  this.setGame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.out.Match.prototype.hasGame = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Finalize finalize = 3;
 * @return {?proto.protobuf.out.Match.Finalize}
 */
proto.protobuf.out.Match.prototype.getFinalize = function() {
  return /** @type{?proto.protobuf.out.Match.Finalize} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.out.Match.Finalize, 3));
};


/** @param {?proto.protobuf.out.Match.Finalize|undefined} value */
proto.protobuf.out.Match.prototype.setFinalize = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.protobuf.out.Match.oneofGroups_[0], value);
};


proto.protobuf.out.Match.prototype.clearFinalize = function() {
  this.setFinalize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.out.Match.prototype.hasFinalize = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.out.Pong = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.out.Pong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.out.Pong.displayName = 'proto.protobuf.out.Pong';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.out.Pong.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.out.Pong.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.out.Pong} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Pong.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.out.Pong}
 */
proto.protobuf.out.Pong.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.out.Pong;
  return proto.protobuf.out.Pong.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.out.Pong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.out.Pong}
 */
proto.protobuf.out.Pong.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.out.Pong.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.out.Pong.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.out.Pong} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Pong.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.out.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protobuf.out.Message.oneofGroups_);
};
goog.inherits(proto.protobuf.out.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.out.Message.displayName = 'proto.protobuf.out.Message';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protobuf.out.Message.oneofGroups_ = [[1,3,4]];

/**
 * @enum {number}
 */
proto.protobuf.out.Message.EventCase = {
  EVENT_NOT_SET: 0,
  LOGIN: 1,
  MATCH: 3,
  PONG: 4
};

/**
 * @return {proto.protobuf.out.Message.EventCase}
 */
proto.protobuf.out.Message.prototype.getEventCase = function() {
  return /** @type {proto.protobuf.out.Message.EventCase} */(jspb.Message.computeOneofCase(this, proto.protobuf.out.Message.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.out.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.out.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.out.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    login: (f = msg.getLogin()) && proto.protobuf.out.Login.toObject(includeInstance, f),
    match: (f = msg.getMatch()) && proto.protobuf.out.Match.toObject(includeInstance, f),
    pong: (f = msg.getPong()) && proto.protobuf.out.Pong.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.out.Message}
 */
proto.protobuf.out.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.out.Message;
  return proto.protobuf.out.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.out.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.out.Message}
 */
proto.protobuf.out.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protobuf.out.Login;
      reader.readMessage(value,proto.protobuf.out.Login.deserializeBinaryFromReader);
      msg.setLogin(value);
      break;
    case 3:
      var value = new proto.protobuf.out.Match;
      reader.readMessage(value,proto.protobuf.out.Match.deserializeBinaryFromReader);
      msg.setMatch(value);
      break;
    case 4:
      var value = new proto.protobuf.out.Pong;
      reader.readMessage(value,proto.protobuf.out.Pong.deserializeBinaryFromReader);
      msg.setPong(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.out.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.out.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.out.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.out.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogin();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protobuf.out.Login.serializeBinaryToWriter
    );
  }
  f = message.getMatch();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protobuf.out.Match.serializeBinaryToWriter
    );
  }
  f = message.getPong();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.protobuf.out.Pong.serializeBinaryToWriter
    );
  }
};


/**
 * optional Login login = 1;
 * @return {?proto.protobuf.out.Login}
 */
proto.protobuf.out.Message.prototype.getLogin = function() {
  return /** @type{?proto.protobuf.out.Login} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.out.Login, 1));
};


/** @param {?proto.protobuf.out.Login|undefined} value */
proto.protobuf.out.Message.prototype.setLogin = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.protobuf.out.Message.oneofGroups_[0], value);
};


proto.protobuf.out.Message.prototype.clearLogin = function() {
  this.setLogin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.out.Message.prototype.hasLogin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Match match = 3;
 * @return {?proto.protobuf.out.Match}
 */
proto.protobuf.out.Message.prototype.getMatch = function() {
  return /** @type{?proto.protobuf.out.Match} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.out.Match, 3));
};


/** @param {?proto.protobuf.out.Match|undefined} value */
proto.protobuf.out.Message.prototype.setMatch = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.protobuf.out.Message.oneofGroups_[0], value);
};


proto.protobuf.out.Message.prototype.clearMatch = function() {
  this.setMatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.out.Message.prototype.hasMatch = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Pong pong = 4;
 * @return {?proto.protobuf.out.Pong}
 */
proto.protobuf.out.Message.prototype.getPong = function() {
  return /** @type{?proto.protobuf.out.Pong} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.out.Pong, 4));
};


/** @param {?proto.protobuf.out.Pong|undefined} value */
proto.protobuf.out.Message.prototype.setPong = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.protobuf.out.Message.oneofGroups_[0], value);
};


proto.protobuf.out.Message.prototype.clearPong = function() {
  this.setPong(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.out.Message.prototype.hasPong = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.protobuf.out);
