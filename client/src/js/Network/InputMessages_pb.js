/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.protobuf.in.Login', null, global);
goog.exportSymbol('proto.protobuf.in.Match', null, global);
goog.exportSymbol('proto.protobuf.in.Match.Finalize', null, global);
goog.exportSymbol('proto.protobuf.in.Match.Game', null, global);
goog.exportSymbol('proto.protobuf.in.Match.Game.ActivateAbility', null, global);
goog.exportSymbol('proto.protobuf.in.Match.Game.ActivateFactory', null, global);
goog.exportSymbol('proto.protobuf.in.Match.Game.ChangeGlobalTarget', null, global);
goog.exportSymbol('proto.protobuf.in.Match.Game.ChangeTargetPreference', null, global);
goog.exportSymbol('proto.protobuf.in.Match.Game.UpgradeFactory', null, global);
goog.exportSymbol('proto.protobuf.in.Match.Pick', null, global);
goog.exportSymbol('proto.protobuf.in.Match.Pick.Ban', null, global);
goog.exportSymbol('proto.protobuf.in.Match.Pick.ModPageSelection', null, global);
goog.exportSymbol('proto.protobuf.in.Match.Pick.Pick', null, global);
goog.exportSymbol('proto.protobuf.in.Match.Pick.Target', null, global);
goog.exportSymbol('proto.protobuf.in.Match.PlayEmote', null, global);
goog.exportSymbol('proto.protobuf.in.Message', null, global);
goog.exportSymbol('proto.protobuf.in.Ping', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.in.Login = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.in.Login, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.in.Login.displayName = 'proto.protobuf.in.Login';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.in.Login.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.in.Login.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.in.Login} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Login.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.in.Login}
 */
proto.protobuf.in.Login.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.in.Login;
  return proto.protobuf.in.Login.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.in.Login} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.in.Login}
 */
proto.protobuf.in.Login.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.in.Login.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.in.Login.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.in.Login} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Login.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.protobuf.in.Login.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protobuf.in.Login.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.in.Match = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protobuf.in.Match.oneofGroups_);
};
goog.inherits(proto.protobuf.in.Match, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.in.Match.displayName = 'proto.protobuf.in.Match';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protobuf.in.Match.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.protobuf.in.Match.TypeCase = {
  TYPE_NOT_SET: 0,
  PICK: 1,
  GAME: 2,
  FINALIZE: 3
};

/**
 * @return {proto.protobuf.in.Match.TypeCase}
 */
proto.protobuf.in.Match.prototype.getTypeCase = function() {
  return /** @type {proto.protobuf.in.Match.TypeCase} */(jspb.Message.computeOneofCase(this, proto.protobuf.in.Match.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.in.Match.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.in.Match.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.in.Match} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Match.toObject = function(includeInstance, msg) {
  var f, obj = {
    pick: (f = msg.getPick()) && proto.protobuf.in.Match.Pick.toObject(includeInstance, f),
    game: (f = msg.getGame()) && proto.protobuf.in.Match.Game.toObject(includeInstance, f),
    finalize: (f = msg.getFinalize()) && proto.protobuf.in.Match.Finalize.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.in.Match}
 */
proto.protobuf.in.Match.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.in.Match;
  return proto.protobuf.in.Match.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.in.Match} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.in.Match}
 */
proto.protobuf.in.Match.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protobuf.in.Match.Pick;
      reader.readMessage(value,proto.protobuf.in.Match.Pick.deserializeBinaryFromReader);
      msg.setPick(value);
      break;
    case 2:
      var value = new proto.protobuf.in.Match.Game;
      reader.readMessage(value,proto.protobuf.in.Match.Game.deserializeBinaryFromReader);
      msg.setGame(value);
      break;
    case 3:
      var value = new proto.protobuf.in.Match.Finalize;
      reader.readMessage(value,proto.protobuf.in.Match.Finalize.deserializeBinaryFromReader);
      msg.setFinalize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.in.Match.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.in.Match.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.in.Match} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Match.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPick();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protobuf.in.Match.Pick.serializeBinaryToWriter
    );
  }
  f = message.getGame();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protobuf.in.Match.Game.serializeBinaryToWriter
    );
  }
  f = message.getFinalize();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protobuf.in.Match.Finalize.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.in.Match.PlayEmote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.in.Match.PlayEmote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.in.Match.PlayEmote.displayName = 'proto.protobuf.in.Match.PlayEmote';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.in.Match.PlayEmote.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.in.Match.PlayEmote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.in.Match.PlayEmote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Match.PlayEmote.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.in.Match.PlayEmote}
 */
proto.protobuf.in.Match.PlayEmote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.in.Match.PlayEmote;
  return proto.protobuf.in.Match.PlayEmote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.in.Match.PlayEmote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.in.Match.PlayEmote}
 */
proto.protobuf.in.Match.PlayEmote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.in.Match.PlayEmote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.in.Match.PlayEmote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.in.Match.PlayEmote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Match.PlayEmote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.protobuf.in.Match.PlayEmote.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protobuf.in.Match.PlayEmote.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.in.Match.Pick = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protobuf.in.Match.Pick.repeatedFields_, null);
};
goog.inherits(proto.protobuf.in.Match.Pick, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.in.Match.Pick.displayName = 'proto.protobuf.in.Match.Pick';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protobuf.in.Match.Pick.repeatedFields_ = [1,2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.in.Match.Pick.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.in.Match.Pick.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.in.Match.Pick} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Match.Pick.toObject = function(includeInstance, msg) {
  var f, obj = {
    picksList: jspb.Message.toObjectList(msg.getPicksList(),
    proto.protobuf.in.Match.Pick.Pick.toObject, includeInstance),
    bansList: jspb.Message.toObjectList(msg.getBansList(),
    proto.protobuf.in.Match.Pick.Ban.toObject, includeInstance),
    modpageselectionsList: jspb.Message.toObjectList(msg.getModpageselectionsList(),
    proto.protobuf.in.Match.Pick.ModPageSelection.toObject, includeInstance),
    emoteplaysList: jspb.Message.toObjectList(msg.getEmoteplaysList(),
    proto.protobuf.in.Match.PlayEmote.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.in.Match.Pick}
 */
proto.protobuf.in.Match.Pick.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.in.Match.Pick;
  return proto.protobuf.in.Match.Pick.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.in.Match.Pick} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.in.Match.Pick}
 */
proto.protobuf.in.Match.Pick.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protobuf.in.Match.Pick.Pick;
      reader.readMessage(value,proto.protobuf.in.Match.Pick.Pick.deserializeBinaryFromReader);
      msg.addPicks(value);
      break;
    case 2:
      var value = new proto.protobuf.in.Match.Pick.Ban;
      reader.readMessage(value,proto.protobuf.in.Match.Pick.Ban.deserializeBinaryFromReader);
      msg.addBans(value);
      break;
    case 3:
      var value = new proto.protobuf.in.Match.Pick.ModPageSelection;
      reader.readMessage(value,proto.protobuf.in.Match.Pick.ModPageSelection.deserializeBinaryFromReader);
      msg.addModpageselections(value);
      break;
    case 4:
      var value = new proto.protobuf.in.Match.PlayEmote;
      reader.readMessage(value,proto.protobuf.in.Match.PlayEmote.deserializeBinaryFromReader);
      msg.addEmoteplays(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.in.Match.Pick.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.in.Match.Pick.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.in.Match.Pick} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Match.Pick.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPicksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.protobuf.in.Match.Pick.Pick.serializeBinaryToWriter
    );
  }
  f = message.getBansList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protobuf.in.Match.Pick.Ban.serializeBinaryToWriter
    );
  }
  f = message.getModpageselectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.protobuf.in.Match.Pick.ModPageSelection.serializeBinaryToWriter
    );
  }
  f = message.getEmoteplaysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.protobuf.in.Match.PlayEmote.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.protobuf.in.Match.Pick.Target = {
  FACTORY: 0,
  ABILITY: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.in.Match.Pick.Pick = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.in.Match.Pick.Pick, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.in.Match.Pick.Pick.displayName = 'proto.protobuf.in.Match.Pick.Pick';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.in.Match.Pick.Pick.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.in.Match.Pick.Pick.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.in.Match.Pick.Pick} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Match.Pick.Pick.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    target: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.in.Match.Pick.Pick}
 */
proto.protobuf.in.Match.Pick.Pick.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.in.Match.Pick.Pick;
  return proto.protobuf.in.Match.Pick.Pick.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.in.Match.Pick.Pick} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.in.Match.Pick.Pick}
 */
proto.protobuf.in.Match.Pick.Pick.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.protobuf.in.Match.Pick.Target} */ (reader.readEnum());
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.in.Match.Pick.Pick.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.in.Match.Pick.Pick.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.in.Match.Pick.Pick} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Match.Pick.Pick.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTarget();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.protobuf.in.Match.Pick.Pick.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protobuf.in.Match.Pick.Pick.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Target target = 2;
 * @return {!proto.protobuf.in.Match.Pick.Target}
 */
proto.protobuf.in.Match.Pick.Pick.prototype.getTarget = function() {
  return /** @type {!proto.protobuf.in.Match.Pick.Target} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.protobuf.in.Match.Pick.Target} value */
proto.protobuf.in.Match.Pick.Pick.prototype.setTarget = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.in.Match.Pick.Ban = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.in.Match.Pick.Ban, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.in.Match.Pick.Ban.displayName = 'proto.protobuf.in.Match.Pick.Ban';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.in.Match.Pick.Ban.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.in.Match.Pick.Ban.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.in.Match.Pick.Ban} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Match.Pick.Ban.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    target: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.in.Match.Pick.Ban}
 */
proto.protobuf.in.Match.Pick.Ban.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.in.Match.Pick.Ban;
  return proto.protobuf.in.Match.Pick.Ban.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.in.Match.Pick.Ban} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.in.Match.Pick.Ban}
 */
proto.protobuf.in.Match.Pick.Ban.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.protobuf.in.Match.Pick.Target} */ (reader.readEnum());
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.in.Match.Pick.Ban.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.in.Match.Pick.Ban.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.in.Match.Pick.Ban} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Match.Pick.Ban.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTarget();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.protobuf.in.Match.Pick.Ban.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protobuf.in.Match.Pick.Ban.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Target target = 2;
 * @return {!proto.protobuf.in.Match.Pick.Target}
 */
proto.protobuf.in.Match.Pick.Ban.prototype.getTarget = function() {
  return /** @type {!proto.protobuf.in.Match.Pick.Target} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.protobuf.in.Match.Pick.Target} value */
proto.protobuf.in.Match.Pick.Ban.prototype.setTarget = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.in.Match.Pick.ModPageSelection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.in.Match.Pick.ModPageSelection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.in.Match.Pick.ModPageSelection.displayName = 'proto.protobuf.in.Match.Pick.ModPageSelection';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.in.Match.Pick.ModPageSelection.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.in.Match.Pick.ModPageSelection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.in.Match.Pick.ModPageSelection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Match.Pick.ModPageSelection.toObject = function(includeInstance, msg) {
  var f, obj = {
    pid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.in.Match.Pick.ModPageSelection}
 */
proto.protobuf.in.Match.Pick.ModPageSelection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.in.Match.Pick.ModPageSelection;
  return proto.protobuf.in.Match.Pick.ModPageSelection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.in.Match.Pick.ModPageSelection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.in.Match.Pick.ModPageSelection}
 */
proto.protobuf.in.Match.Pick.ModPageSelection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.in.Match.Pick.ModPageSelection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.in.Match.Pick.ModPageSelection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.in.Match.Pick.ModPageSelection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Match.Pick.ModPageSelection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 pid = 1;
 * @return {number}
 */
proto.protobuf.in.Match.Pick.ModPageSelection.prototype.getPid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protobuf.in.Match.Pick.ModPageSelection.prototype.setPid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Pick picks = 1;
 * @return {!Array.<!proto.protobuf.in.Match.Pick.Pick>}
 */
proto.protobuf.in.Match.Pick.prototype.getPicksList = function() {
  return /** @type{!Array.<!proto.protobuf.in.Match.Pick.Pick>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobuf.in.Match.Pick.Pick, 1));
};


/** @param {!Array.<!proto.protobuf.in.Match.Pick.Pick>} value */
proto.protobuf.in.Match.Pick.prototype.setPicksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.protobuf.in.Match.Pick.Pick=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobuf.in.Match.Pick.Pick}
 */
proto.protobuf.in.Match.Pick.prototype.addPicks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.protobuf.in.Match.Pick.Pick, opt_index);
};


proto.protobuf.in.Match.Pick.prototype.clearPicksList = function() {
  this.setPicksList([]);
};


/**
 * repeated Ban bans = 2;
 * @return {!Array.<!proto.protobuf.in.Match.Pick.Ban>}
 */
proto.protobuf.in.Match.Pick.prototype.getBansList = function() {
  return /** @type{!Array.<!proto.protobuf.in.Match.Pick.Ban>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobuf.in.Match.Pick.Ban, 2));
};


/** @param {!Array.<!proto.protobuf.in.Match.Pick.Ban>} value */
proto.protobuf.in.Match.Pick.prototype.setBansList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.protobuf.in.Match.Pick.Ban=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobuf.in.Match.Pick.Ban}
 */
proto.protobuf.in.Match.Pick.prototype.addBans = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protobuf.in.Match.Pick.Ban, opt_index);
};


proto.protobuf.in.Match.Pick.prototype.clearBansList = function() {
  this.setBansList([]);
};


/**
 * repeated ModPageSelection modPageSelections = 3;
 * @return {!Array.<!proto.protobuf.in.Match.Pick.ModPageSelection>}
 */
proto.protobuf.in.Match.Pick.prototype.getModpageselectionsList = function() {
  return /** @type{!Array.<!proto.protobuf.in.Match.Pick.ModPageSelection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobuf.in.Match.Pick.ModPageSelection, 3));
};


/** @param {!Array.<!proto.protobuf.in.Match.Pick.ModPageSelection>} value */
proto.protobuf.in.Match.Pick.prototype.setModpageselectionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.protobuf.in.Match.Pick.ModPageSelection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobuf.in.Match.Pick.ModPageSelection}
 */
proto.protobuf.in.Match.Pick.prototype.addModpageselections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.protobuf.in.Match.Pick.ModPageSelection, opt_index);
};


proto.protobuf.in.Match.Pick.prototype.clearModpageselectionsList = function() {
  this.setModpageselectionsList([]);
};


/**
 * repeated PlayEmote emotePlays = 4;
 * @return {!Array.<!proto.protobuf.in.Match.PlayEmote>}
 */
proto.protobuf.in.Match.Pick.prototype.getEmoteplaysList = function() {
  return /** @type{!Array.<!proto.protobuf.in.Match.PlayEmote>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobuf.in.Match.PlayEmote, 4));
};


/** @param {!Array.<!proto.protobuf.in.Match.PlayEmote>} value */
proto.protobuf.in.Match.Pick.prototype.setEmoteplaysList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.protobuf.in.Match.PlayEmote=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobuf.in.Match.PlayEmote}
 */
proto.protobuf.in.Match.Pick.prototype.addEmoteplays = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.protobuf.in.Match.PlayEmote, opt_index);
};


proto.protobuf.in.Match.Pick.prototype.clearEmoteplaysList = function() {
  this.setEmoteplaysList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.in.Match.Game = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protobuf.in.Match.Game.repeatedFields_, null);
};
goog.inherits(proto.protobuf.in.Match.Game, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.in.Match.Game.displayName = 'proto.protobuf.in.Match.Game';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protobuf.in.Match.Game.repeatedFields_ = [1,2,3,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.in.Match.Game.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.in.Match.Game.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.in.Match.Game} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Match.Game.toObject = function(includeInstance, msg) {
  var f, obj = {
    factoryactivationsList: jspb.Message.toObjectList(msg.getFactoryactivationsList(),
    proto.protobuf.in.Match.Game.ActivateFactory.toObject, includeInstance),
    factoryupgradesList: jspb.Message.toObjectList(msg.getFactoryupgradesList(),
    proto.protobuf.in.Match.Game.UpgradeFactory.toObject, includeInstance),
    abilityactivationsList: jspb.Message.toObjectList(msg.getAbilityactivationsList(),
    proto.protobuf.in.Match.Game.ActivateAbility.toObject, includeInstance),
    targetpreferencechangesList: jspb.Message.toObjectList(msg.getTargetpreferencechangesList(),
    proto.protobuf.in.Match.Game.ChangeTargetPreference.toObject, includeInstance),
    globaltargetchangesList: jspb.Message.toObjectList(msg.getGlobaltargetchangesList(),
    proto.protobuf.in.Match.Game.ChangeGlobalTarget.toObject, includeInstance),
    emoteplaysList: jspb.Message.toObjectList(msg.getEmoteplaysList(),
    proto.protobuf.in.Match.PlayEmote.toObject, includeInstance),
    surrender: jspb.Message.getFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.in.Match.Game}
 */
proto.protobuf.in.Match.Game.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.in.Match.Game;
  return proto.protobuf.in.Match.Game.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.in.Match.Game} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.in.Match.Game}
 */
proto.protobuf.in.Match.Game.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protobuf.in.Match.Game.ActivateFactory;
      reader.readMessage(value,proto.protobuf.in.Match.Game.ActivateFactory.deserializeBinaryFromReader);
      msg.addFactoryactivations(value);
      break;
    case 2:
      var value = new proto.protobuf.in.Match.Game.UpgradeFactory;
      reader.readMessage(value,proto.protobuf.in.Match.Game.UpgradeFactory.deserializeBinaryFromReader);
      msg.addFactoryupgrades(value);
      break;
    case 3:
      var value = new proto.protobuf.in.Match.Game.ActivateAbility;
      reader.readMessage(value,proto.protobuf.in.Match.Game.ActivateAbility.deserializeBinaryFromReader);
      msg.addAbilityactivations(value);
      break;
    case 4:
      var value = new proto.protobuf.in.Match.Game.ChangeTargetPreference;
      reader.readMessage(value,proto.protobuf.in.Match.Game.ChangeTargetPreference.deserializeBinaryFromReader);
      msg.addTargetpreferencechanges(value);
      break;
    case 5:
      var value = new proto.protobuf.in.Match.Game.ChangeGlobalTarget;
      reader.readMessage(value,proto.protobuf.in.Match.Game.ChangeGlobalTarget.deserializeBinaryFromReader);
      msg.addGlobaltargetchanges(value);
      break;
    case 6:
      var value = new proto.protobuf.in.Match.PlayEmote;
      reader.readMessage(value,proto.protobuf.in.Match.PlayEmote.deserializeBinaryFromReader);
      msg.addEmoteplays(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSurrender(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.in.Match.Game.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.in.Match.Game.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.in.Match.Game} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Match.Game.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFactoryactivationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.protobuf.in.Match.Game.ActivateFactory.serializeBinaryToWriter
    );
  }
  f = message.getFactoryupgradesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protobuf.in.Match.Game.UpgradeFactory.serializeBinaryToWriter
    );
  }
  f = message.getAbilityactivationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.protobuf.in.Match.Game.ActivateAbility.serializeBinaryToWriter
    );
  }
  f = message.getTargetpreferencechangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.protobuf.in.Match.Game.ChangeTargetPreference.serializeBinaryToWriter
    );
  }
  f = message.getGlobaltargetchangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.protobuf.in.Match.Game.ChangeGlobalTarget.serializeBinaryToWriter
    );
  }
  f = message.getEmoteplaysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.protobuf.in.Match.PlayEmote.serializeBinaryToWriter
    );
  }
  f = message.getSurrender();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.in.Match.Game.ActivateFactory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.in.Match.Game.ActivateFactory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.in.Match.Game.ActivateFactory.displayName = 'proto.protobuf.in.Match.Game.ActivateFactory';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.in.Match.Game.ActivateFactory.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.in.Match.Game.ActivateFactory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.in.Match.Game.ActivateFactory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Match.Game.ActivateFactory.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    position: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.in.Match.Game.ActivateFactory}
 */
proto.protobuf.in.Match.Game.ActivateFactory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.in.Match.Game.ActivateFactory;
  return proto.protobuf.in.Match.Game.ActivateFactory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.in.Match.Game.ActivateFactory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.in.Match.Game.ActivateFactory}
 */
proto.protobuf.in.Match.Game.ActivateFactory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.in.Match.Game.ActivateFactory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.in.Match.Game.ActivateFactory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.in.Match.Game.ActivateFactory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Match.Game.ActivateFactory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.protobuf.in.Match.Game.ActivateFactory.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protobuf.in.Match.Game.ActivateFactory.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 position = 2;
 * @return {number}
 */
proto.protobuf.in.Match.Game.ActivateFactory.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protobuf.in.Match.Game.ActivateFactory.prototype.setPosition = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.in.Match.Game.UpgradeFactory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.in.Match.Game.UpgradeFactory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.in.Match.Game.UpgradeFactory.displayName = 'proto.protobuf.in.Match.Game.UpgradeFactory';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.in.Match.Game.UpgradeFactory.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.in.Match.Game.UpgradeFactory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.in.Match.Game.UpgradeFactory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Match.Game.UpgradeFactory.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    upgrade: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.in.Match.Game.UpgradeFactory}
 */
proto.protobuf.in.Match.Game.UpgradeFactory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.in.Match.Game.UpgradeFactory;
  return proto.protobuf.in.Match.Game.UpgradeFactory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.in.Match.Game.UpgradeFactory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.in.Match.Game.UpgradeFactory}
 */
proto.protobuf.in.Match.Game.UpgradeFactory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUpgrade(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.in.Match.Game.UpgradeFactory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.in.Match.Game.UpgradeFactory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.in.Match.Game.UpgradeFactory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Match.Game.UpgradeFactory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getUpgrade();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.protobuf.in.Match.Game.UpgradeFactory.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protobuf.in.Match.Game.UpgradeFactory.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 upgrade = 2;
 * @return {number}
 */
proto.protobuf.in.Match.Game.UpgradeFactory.prototype.getUpgrade = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protobuf.in.Match.Game.UpgradeFactory.prototype.setUpgrade = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.in.Match.Game.ActivateAbility = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.in.Match.Game.ActivateAbility, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.in.Match.Game.ActivateAbility.displayName = 'proto.protobuf.in.Match.Game.ActivateAbility';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.in.Match.Game.ActivateAbility.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.in.Match.Game.ActivateAbility.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.in.Match.Game.ActivateAbility} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Match.Game.ActivateAbility.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    position: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.in.Match.Game.ActivateAbility}
 */
proto.protobuf.in.Match.Game.ActivateAbility.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.in.Match.Game.ActivateAbility;
  return proto.protobuf.in.Match.Game.ActivateAbility.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.in.Match.Game.ActivateAbility} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.in.Match.Game.ActivateAbility}
 */
proto.protobuf.in.Match.Game.ActivateAbility.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.in.Match.Game.ActivateAbility.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.in.Match.Game.ActivateAbility.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.in.Match.Game.ActivateAbility} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Match.Game.ActivateAbility.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.protobuf.in.Match.Game.ActivateAbility.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protobuf.in.Match.Game.ActivateAbility.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 position = 2;
 * @return {number}
 */
proto.protobuf.in.Match.Game.ActivateAbility.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protobuf.in.Match.Game.ActivateAbility.prototype.setPosition = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.in.Match.Game.ChangeTargetPreference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.in.Match.Game.ChangeTargetPreference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.in.Match.Game.ChangeTargetPreference.displayName = 'proto.protobuf.in.Match.Game.ChangeTargetPreference';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.in.Match.Game.ChangeTargetPreference.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.in.Match.Game.ChangeTargetPreference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.in.Match.Game.ChangeTargetPreference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Match.Game.ChangeTargetPreference.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    targetpreference: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.in.Match.Game.ChangeTargetPreference}
 */
proto.protobuf.in.Match.Game.ChangeTargetPreference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.in.Match.Game.ChangeTargetPreference;
  return proto.protobuf.in.Match.Game.ChangeTargetPreference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.in.Match.Game.ChangeTargetPreference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.in.Match.Game.ChangeTargetPreference}
 */
proto.protobuf.in.Match.Game.ChangeTargetPreference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTargetpreference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.in.Match.Game.ChangeTargetPreference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.in.Match.Game.ChangeTargetPreference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.in.Match.Game.ChangeTargetPreference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Match.Game.ChangeTargetPreference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTargetpreference();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.protobuf.in.Match.Game.ChangeTargetPreference.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protobuf.in.Match.Game.ChangeTargetPreference.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 targetPreference = 2;
 * @return {number}
 */
proto.protobuf.in.Match.Game.ChangeTargetPreference.prototype.getTargetpreference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protobuf.in.Match.Game.ChangeTargetPreference.prototype.setTargetpreference = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.in.Match.Game.ChangeGlobalTarget = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.in.Match.Game.ChangeGlobalTarget, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.in.Match.Game.ChangeGlobalTarget.displayName = 'proto.protobuf.in.Match.Game.ChangeGlobalTarget';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.in.Match.Game.ChangeGlobalTarget.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.in.Match.Game.ChangeGlobalTarget.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.in.Match.Game.ChangeGlobalTarget} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Match.Game.ChangeGlobalTarget.toObject = function(includeInstance, msg) {
  var f, obj = {
    guid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.in.Match.Game.ChangeGlobalTarget}
 */
proto.protobuf.in.Match.Game.ChangeGlobalTarget.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.in.Match.Game.ChangeGlobalTarget;
  return proto.protobuf.in.Match.Game.ChangeGlobalTarget.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.in.Match.Game.ChangeGlobalTarget} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.in.Match.Game.ChangeGlobalTarget}
 */
proto.protobuf.in.Match.Game.ChangeGlobalTarget.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.in.Match.Game.ChangeGlobalTarget.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.in.Match.Game.ChangeGlobalTarget.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.in.Match.Game.ChangeGlobalTarget} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Match.Game.ChangeGlobalTarget.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 guid = 1;
 * @return {number}
 */
proto.protobuf.in.Match.Game.ChangeGlobalTarget.prototype.getGuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protobuf.in.Match.Game.ChangeGlobalTarget.prototype.setGuid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated ActivateFactory factoryActivations = 1;
 * @return {!Array.<!proto.protobuf.in.Match.Game.ActivateFactory>}
 */
proto.protobuf.in.Match.Game.prototype.getFactoryactivationsList = function() {
  return /** @type{!Array.<!proto.protobuf.in.Match.Game.ActivateFactory>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobuf.in.Match.Game.ActivateFactory, 1));
};


/** @param {!Array.<!proto.protobuf.in.Match.Game.ActivateFactory>} value */
proto.protobuf.in.Match.Game.prototype.setFactoryactivationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.protobuf.in.Match.Game.ActivateFactory=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobuf.in.Match.Game.ActivateFactory}
 */
proto.protobuf.in.Match.Game.prototype.addFactoryactivations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.protobuf.in.Match.Game.ActivateFactory, opt_index);
};


proto.protobuf.in.Match.Game.prototype.clearFactoryactivationsList = function() {
  this.setFactoryactivationsList([]);
};


/**
 * repeated UpgradeFactory factoryUpgrades = 2;
 * @return {!Array.<!proto.protobuf.in.Match.Game.UpgradeFactory>}
 */
proto.protobuf.in.Match.Game.prototype.getFactoryupgradesList = function() {
  return /** @type{!Array.<!proto.protobuf.in.Match.Game.UpgradeFactory>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobuf.in.Match.Game.UpgradeFactory, 2));
};


/** @param {!Array.<!proto.protobuf.in.Match.Game.UpgradeFactory>} value */
proto.protobuf.in.Match.Game.prototype.setFactoryupgradesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.protobuf.in.Match.Game.UpgradeFactory=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobuf.in.Match.Game.UpgradeFactory}
 */
proto.protobuf.in.Match.Game.prototype.addFactoryupgrades = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protobuf.in.Match.Game.UpgradeFactory, opt_index);
};


proto.protobuf.in.Match.Game.prototype.clearFactoryupgradesList = function() {
  this.setFactoryupgradesList([]);
};


/**
 * repeated ActivateAbility abilityActivations = 3;
 * @return {!Array.<!proto.protobuf.in.Match.Game.ActivateAbility>}
 */
proto.protobuf.in.Match.Game.prototype.getAbilityactivationsList = function() {
  return /** @type{!Array.<!proto.protobuf.in.Match.Game.ActivateAbility>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobuf.in.Match.Game.ActivateAbility, 3));
};


/** @param {!Array.<!proto.protobuf.in.Match.Game.ActivateAbility>} value */
proto.protobuf.in.Match.Game.prototype.setAbilityactivationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.protobuf.in.Match.Game.ActivateAbility=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobuf.in.Match.Game.ActivateAbility}
 */
proto.protobuf.in.Match.Game.prototype.addAbilityactivations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.protobuf.in.Match.Game.ActivateAbility, opt_index);
};


proto.protobuf.in.Match.Game.prototype.clearAbilityactivationsList = function() {
  this.setAbilityactivationsList([]);
};


/**
 * repeated ChangeTargetPreference targetPreferenceChanges = 4;
 * @return {!Array.<!proto.protobuf.in.Match.Game.ChangeTargetPreference>}
 */
proto.protobuf.in.Match.Game.prototype.getTargetpreferencechangesList = function() {
  return /** @type{!Array.<!proto.protobuf.in.Match.Game.ChangeTargetPreference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobuf.in.Match.Game.ChangeTargetPreference, 4));
};


/** @param {!Array.<!proto.protobuf.in.Match.Game.ChangeTargetPreference>} value */
proto.protobuf.in.Match.Game.prototype.setTargetpreferencechangesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.protobuf.in.Match.Game.ChangeTargetPreference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobuf.in.Match.Game.ChangeTargetPreference}
 */
proto.protobuf.in.Match.Game.prototype.addTargetpreferencechanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.protobuf.in.Match.Game.ChangeTargetPreference, opt_index);
};


proto.protobuf.in.Match.Game.prototype.clearTargetpreferencechangesList = function() {
  this.setTargetpreferencechangesList([]);
};


/**
 * repeated ChangeGlobalTarget globalTargetChanges = 5;
 * @return {!Array.<!proto.protobuf.in.Match.Game.ChangeGlobalTarget>}
 */
proto.protobuf.in.Match.Game.prototype.getGlobaltargetchangesList = function() {
  return /** @type{!Array.<!proto.protobuf.in.Match.Game.ChangeGlobalTarget>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobuf.in.Match.Game.ChangeGlobalTarget, 5));
};


/** @param {!Array.<!proto.protobuf.in.Match.Game.ChangeGlobalTarget>} value */
proto.protobuf.in.Match.Game.prototype.setGlobaltargetchangesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.protobuf.in.Match.Game.ChangeGlobalTarget=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobuf.in.Match.Game.ChangeGlobalTarget}
 */
proto.protobuf.in.Match.Game.prototype.addGlobaltargetchanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.protobuf.in.Match.Game.ChangeGlobalTarget, opt_index);
};


proto.protobuf.in.Match.Game.prototype.clearGlobaltargetchangesList = function() {
  this.setGlobaltargetchangesList([]);
};


/**
 * repeated PlayEmote emotePlays = 6;
 * @return {!Array.<!proto.protobuf.in.Match.PlayEmote>}
 */
proto.protobuf.in.Match.Game.prototype.getEmoteplaysList = function() {
  return /** @type{!Array.<!proto.protobuf.in.Match.PlayEmote>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobuf.in.Match.PlayEmote, 6));
};


/** @param {!Array.<!proto.protobuf.in.Match.PlayEmote>} value */
proto.protobuf.in.Match.Game.prototype.setEmoteplaysList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.protobuf.in.Match.PlayEmote=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobuf.in.Match.PlayEmote}
 */
proto.protobuf.in.Match.Game.prototype.addEmoteplays = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.protobuf.in.Match.PlayEmote, opt_index);
};


proto.protobuf.in.Match.Game.prototype.clearEmoteplaysList = function() {
  this.setEmoteplaysList([]);
};


/**
 * optional bool surrender = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protobuf.in.Match.Game.prototype.getSurrender = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.protobuf.in.Match.Game.prototype.setSurrender = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.in.Match.Finalize = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protobuf.in.Match.Finalize.repeatedFields_, null);
};
goog.inherits(proto.protobuf.in.Match.Finalize, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.in.Match.Finalize.displayName = 'proto.protobuf.in.Match.Finalize';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protobuf.in.Match.Finalize.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.in.Match.Finalize.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.in.Match.Finalize.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.in.Match.Finalize} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Match.Finalize.toObject = function(includeInstance, msg) {
  var f, obj = {
    emoteplaysList: jspb.Message.toObjectList(msg.getEmoteplaysList(),
    proto.protobuf.in.Match.PlayEmote.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.in.Match.Finalize}
 */
proto.protobuf.in.Match.Finalize.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.in.Match.Finalize;
  return proto.protobuf.in.Match.Finalize.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.in.Match.Finalize} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.in.Match.Finalize}
 */
proto.protobuf.in.Match.Finalize.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protobuf.in.Match.PlayEmote;
      reader.readMessage(value,proto.protobuf.in.Match.PlayEmote.deserializeBinaryFromReader);
      msg.addEmoteplays(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.in.Match.Finalize.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.in.Match.Finalize.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.in.Match.Finalize} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Match.Finalize.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmoteplaysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.protobuf.in.Match.PlayEmote.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PlayEmote emotePlays = 1;
 * @return {!Array.<!proto.protobuf.in.Match.PlayEmote>}
 */
proto.protobuf.in.Match.Finalize.prototype.getEmoteplaysList = function() {
  return /** @type{!Array.<!proto.protobuf.in.Match.PlayEmote>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobuf.in.Match.PlayEmote, 1));
};


/** @param {!Array.<!proto.protobuf.in.Match.PlayEmote>} value */
proto.protobuf.in.Match.Finalize.prototype.setEmoteplaysList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.protobuf.in.Match.PlayEmote=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobuf.in.Match.PlayEmote}
 */
proto.protobuf.in.Match.Finalize.prototype.addEmoteplays = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.protobuf.in.Match.PlayEmote, opt_index);
};


proto.protobuf.in.Match.Finalize.prototype.clearEmoteplaysList = function() {
  this.setEmoteplaysList([]);
};


/**
 * optional Pick pick = 1;
 * @return {?proto.protobuf.in.Match.Pick}
 */
proto.protobuf.in.Match.prototype.getPick = function() {
  return /** @type{?proto.protobuf.in.Match.Pick} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.in.Match.Pick, 1));
};


/** @param {?proto.protobuf.in.Match.Pick|undefined} value */
proto.protobuf.in.Match.prototype.setPick = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.protobuf.in.Match.oneofGroups_[0], value);
};


proto.protobuf.in.Match.prototype.clearPick = function() {
  this.setPick(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.in.Match.prototype.hasPick = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Game game = 2;
 * @return {?proto.protobuf.in.Match.Game}
 */
proto.protobuf.in.Match.prototype.getGame = function() {
  return /** @type{?proto.protobuf.in.Match.Game} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.in.Match.Game, 2));
};


/** @param {?proto.protobuf.in.Match.Game|undefined} value */
proto.protobuf.in.Match.prototype.setGame = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.protobuf.in.Match.oneofGroups_[0], value);
};


proto.protobuf.in.Match.prototype.clearGame = function() {
  this.setGame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.in.Match.prototype.hasGame = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Finalize finalize = 3;
 * @return {?proto.protobuf.in.Match.Finalize}
 */
proto.protobuf.in.Match.prototype.getFinalize = function() {
  return /** @type{?proto.protobuf.in.Match.Finalize} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.in.Match.Finalize, 3));
};


/** @param {?proto.protobuf.in.Match.Finalize|undefined} value */
proto.protobuf.in.Match.prototype.setFinalize = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.protobuf.in.Match.oneofGroups_[0], value);
};


proto.protobuf.in.Match.prototype.clearFinalize = function() {
  this.setFinalize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.in.Match.prototype.hasFinalize = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.in.Ping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.in.Ping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.in.Ping.displayName = 'proto.protobuf.in.Ping';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.in.Ping.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.in.Ping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.in.Ping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Ping.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.in.Ping}
 */
proto.protobuf.in.Ping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.in.Ping;
  return proto.protobuf.in.Ping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.in.Ping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.in.Ping}
 */
proto.protobuf.in.Ping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.in.Ping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.in.Ping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.in.Ping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Ping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.in.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protobuf.in.Message.oneofGroups_);
};
goog.inherits(proto.protobuf.in.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.in.Message.displayName = 'proto.protobuf.in.Message';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protobuf.in.Message.oneofGroups_ = [[1,3,4]];

/**
 * @enum {number}
 */
proto.protobuf.in.Message.EventCase = {
  EVENT_NOT_SET: 0,
  LOGIN: 1,
  MATCH: 3,
  PING: 4
};

/**
 * @return {proto.protobuf.in.Message.EventCase}
 */
proto.protobuf.in.Message.prototype.getEventCase = function() {
  return /** @type {proto.protobuf.in.Message.EventCase} */(jspb.Message.computeOneofCase(this, proto.protobuf.in.Message.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.in.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.in.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.in.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    login: (f = msg.getLogin()) && proto.protobuf.in.Login.toObject(includeInstance, f),
    match: (f = msg.getMatch()) && proto.protobuf.in.Match.toObject(includeInstance, f),
    ping: (f = msg.getPing()) && proto.protobuf.in.Ping.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.in.Message}
 */
proto.protobuf.in.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.in.Message;
  return proto.protobuf.in.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.in.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.in.Message}
 */
proto.protobuf.in.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protobuf.in.Login;
      reader.readMessage(value,proto.protobuf.in.Login.deserializeBinaryFromReader);
      msg.setLogin(value);
      break;
    case 3:
      var value = new proto.protobuf.in.Match;
      reader.readMessage(value,proto.protobuf.in.Match.deserializeBinaryFromReader);
      msg.setMatch(value);
      break;
    case 4:
      var value = new proto.protobuf.in.Ping;
      reader.readMessage(value,proto.protobuf.in.Ping.deserializeBinaryFromReader);
      msg.setPing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.in.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.in.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.in.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.in.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogin();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protobuf.in.Login.serializeBinaryToWriter
    );
  }
  f = message.getMatch();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protobuf.in.Match.serializeBinaryToWriter
    );
  }
  f = message.getPing();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.protobuf.in.Ping.serializeBinaryToWriter
    );
  }
};


/**
 * optional Login login = 1;
 * @return {?proto.protobuf.in.Login}
 */
proto.protobuf.in.Message.prototype.getLogin = function() {
  return /** @type{?proto.protobuf.in.Login} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.in.Login, 1));
};


/** @param {?proto.protobuf.in.Login|undefined} value */
proto.protobuf.in.Message.prototype.setLogin = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.protobuf.in.Message.oneofGroups_[0], value);
};


proto.protobuf.in.Message.prototype.clearLogin = function() {
  this.setLogin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.in.Message.prototype.hasLogin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Match match = 3;
 * @return {?proto.protobuf.in.Match}
 */
proto.protobuf.in.Message.prototype.getMatch = function() {
  return /** @type{?proto.protobuf.in.Match} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.in.Match, 3));
};


/** @param {?proto.protobuf.in.Match|undefined} value */
proto.protobuf.in.Message.prototype.setMatch = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.protobuf.in.Message.oneofGroups_[0], value);
};


proto.protobuf.in.Message.prototype.clearMatch = function() {
  this.setMatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.in.Message.prototype.hasMatch = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Ping ping = 4;
 * @return {?proto.protobuf.in.Ping}
 */
proto.protobuf.in.Message.prototype.getPing = function() {
  return /** @type{?proto.protobuf.in.Ping} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.in.Ping, 4));
};


/** @param {?proto.protobuf.in.Ping|undefined} value */
proto.protobuf.in.Message.prototype.setPing = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.protobuf.in.Message.oneofGroups_[0], value);
};


proto.protobuf.in.Message.prototype.clearPing = function() {
  this.setPing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.in.Message.prototype.hasPing = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.protobuf.in);
